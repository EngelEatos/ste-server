// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Chapter is an object representing the database table.
type Chapter struct {
	Downloaded bool     `boil:"downloaded" json:"downloaded" toml:"downloaded" yaml:"downloaded"`
	ID         int      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Idx        int      `boil:"idx" json:"idx" toml:"idx" yaml:"idx"`
	Part       null.Int `boil:"part" json:"part,omitempty" toml:"part" yaml:"part,omitempty"`
	Title      string   `boil:"title" json:"title" toml:"title" yaml:"title"`
	URL        string   `boil:"url" json:"url" toml:"url" yaml:"url"`

	R *chapterR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L chapterL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChapterColumns = struct {
	Downloaded string
	ID         string
	Idx        string
	Part       string
	Title      string
	URL        string
}{
	Downloaded: "downloaded",
	ID:         "id",
	Idx:        "idx",
	Part:       "part",
	Title:      "title",
	URL:        "url",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ChapterWhere = struct {
	Downloaded whereHelperbool
	ID         whereHelperint
	Idx        whereHelperint
	Part       whereHelpernull_Int
	Title      whereHelperstring
	URL        whereHelperstring
}{
	Downloaded: whereHelperbool{field: "\"ste\".\"chapter\".\"downloaded\""},
	ID:         whereHelperint{field: "\"ste\".\"chapter\".\"id\""},
	Idx:        whereHelperint{field: "\"ste\".\"chapter\".\"idx\""},
	Part:       whereHelpernull_Int{field: "\"ste\".\"chapter\".\"part\""},
	Title:      whereHelperstring{field: "\"ste\".\"chapter\".\"title\""},
	URL:        whereHelperstring{field: "\"ste\".\"chapter\".\"url\""},
}

// ChapterRels is where relationship names are stored.
var ChapterRels = struct {
	Novels        string
	ChapterQueues string
}{
	Novels:        "Novels",
	ChapterQueues: "ChapterQueues",
}

// chapterR is where relationships are stored.
type chapterR struct {
	Novels        NovelSlice
	ChapterQueues ChapterQueueSlice
}

// NewStruct creates a new relationship struct
func (*chapterR) NewStruct() *chapterR {
	return &chapterR{}
}

// chapterL is where Load methods for each relationship are stored.
type chapterL struct{}

var (
	chapterColumns               = []string{"downloaded", "id", "idx", "part", "title", "url"}
	chapterColumnsWithoutDefault = []string{"downloaded", "idx", "part", "title", "url"}
	chapterColumnsWithDefault    = []string{"id"}
	chapterPrimaryKeyColumns     = []string{"id"}
)

type (
	// ChapterSlice is an alias for a slice of pointers to Chapter.
	// This should generally be used opposed to []Chapter.
	ChapterSlice []*Chapter
	// ChapterHook is the signature for custom Chapter hook methods
	ChapterHook func(context.Context, boil.ContextExecutor, *Chapter) error

	chapterQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	chapterType                 = reflect.TypeOf(&Chapter{})
	chapterMapping              = queries.MakeStructMapping(chapterType)
	chapterPrimaryKeyMapping, _ = queries.BindMapping(chapterType, chapterMapping, chapterPrimaryKeyColumns)
	chapterInsertCacheMut       sync.RWMutex
	chapterInsertCache          = make(map[string]insertCache)
	chapterUpdateCacheMut       sync.RWMutex
	chapterUpdateCache          = make(map[string]updateCache)
	chapterUpsertCacheMut       sync.RWMutex
	chapterUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var chapterBeforeInsertHooks []ChapterHook
var chapterBeforeUpdateHooks []ChapterHook
var chapterBeforeDeleteHooks []ChapterHook
var chapterBeforeUpsertHooks []ChapterHook

var chapterAfterInsertHooks []ChapterHook
var chapterAfterSelectHooks []ChapterHook
var chapterAfterUpdateHooks []ChapterHook
var chapterAfterDeleteHooks []ChapterHook
var chapterAfterUpsertHooks []ChapterHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Chapter) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chapterBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Chapter) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chapterBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Chapter) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chapterBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Chapter) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chapterBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Chapter) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chapterAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Chapter) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chapterAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Chapter) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chapterAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Chapter) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chapterAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Chapter) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chapterAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddChapterHook registers your hook function for all future operations.
func AddChapterHook(hookPoint boil.HookPoint, chapterHook ChapterHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		chapterBeforeInsertHooks = append(chapterBeforeInsertHooks, chapterHook)
	case boil.BeforeUpdateHook:
		chapterBeforeUpdateHooks = append(chapterBeforeUpdateHooks, chapterHook)
	case boil.BeforeDeleteHook:
		chapterBeforeDeleteHooks = append(chapterBeforeDeleteHooks, chapterHook)
	case boil.BeforeUpsertHook:
		chapterBeforeUpsertHooks = append(chapterBeforeUpsertHooks, chapterHook)
	case boil.AfterInsertHook:
		chapterAfterInsertHooks = append(chapterAfterInsertHooks, chapterHook)
	case boil.AfterSelectHook:
		chapterAfterSelectHooks = append(chapterAfterSelectHooks, chapterHook)
	case boil.AfterUpdateHook:
		chapterAfterUpdateHooks = append(chapterAfterUpdateHooks, chapterHook)
	case boil.AfterDeleteHook:
		chapterAfterDeleteHooks = append(chapterAfterDeleteHooks, chapterHook)
	case boil.AfterUpsertHook:
		chapterAfterUpsertHooks = append(chapterAfterUpsertHooks, chapterHook)
	}
}

// One returns a single chapter record from the query.
func (q chapterQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Chapter, error) {
	o := &Chapter{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for chapter")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Chapter records from the query.
func (q chapterQuery) All(ctx context.Context, exec boil.ContextExecutor) (ChapterSlice, error) {
	var o []*Chapter

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Chapter slice")
	}

	if len(chapterAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Chapter records in the query.
func (q chapterQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count chapter rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q chapterQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if chapter exists")
	}

	return count > 0, nil
}

// Novels retrieves all the novel's Novels with an executor.
func (o *Chapter) Novels(mods ...qm.QueryMod) novelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"ste\".\"chapter_of_novel\" on \"ste\".\"novel\".\"id\" = \"ste\".\"chapter_of_novel\".\"novel_id\""),
		qm.Where("\"ste\".\"chapter_of_novel\".\"chapter_id\"=?", o.ID),
	)

	query := Novels(queryMods...)
	queries.SetFrom(query.Query, "\"ste\".\"novel\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"ste\".\"novel\".*"})
	}

	return query
}

// ChapterQueues retrieves all the chapter_queue's ChapterQueues with an executor.
func (o *Chapter) ChapterQueues(mods ...qm.QueryMod) chapterQueueQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"ste\".\"chapter_queue\".\"chapter_id\"=?", o.ID),
	)

	query := ChapterQueues(queryMods...)
	queries.SetFrom(query.Query, "\"ste\".\"chapter_queue\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"ste\".\"chapter_queue\".*"})
	}

	return query
}

// LoadNovels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (chapterL) LoadNovels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChapter interface{}, mods queries.Applicator) error {
	var slice []*Chapter
	var object *Chapter

	if singular {
		object = maybeChapter.(*Chapter)
	} else {
		slice = *maybeChapter.(*[]*Chapter)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chapterR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chapterR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"ste\".\"novel\".*, \"a\".\"chapter_id\""),
		qm.From("\"ste\".\"novel\""),
		qm.InnerJoin("\"ste\".\"chapter_of_novel\" as \"a\" on \"ste\".\"novel\".\"id\" = \"a\".\"novel_id\""),
		qm.WhereIn("\"a\".\"chapter_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load novel")
	}

	var resultSlice []*Novel

	var localJoinCols []int
	for results.Next() {
		one := new(Novel)
		var localJoinCol int

		err = results.Scan(&one.Chaptercount, &one.CompletlyTranslated, &one.CoverID, &one.Description, &one.FetchedAt, &one.GroupID, &one.ID, &one.LanguageID, &one.Licensed, &one.NovelIDSTR, &one.NtypeID, &one.Status, &one.Title, &one.UpdatedAt, &one.Year, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for novel")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice novel")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on novel")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for novel")
	}

	if len(novelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Novels = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &novelR{}
			}
			foreign.R.Chapters = append(foreign.R.Chapters, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Novels = append(local.R.Novels, foreign)
				if foreign.R == nil {
					foreign.R = &novelR{}
				}
				foreign.R.Chapters = append(foreign.R.Chapters, local)
				break
			}
		}
	}

	return nil
}

// LoadChapterQueues allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (chapterL) LoadChapterQueues(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChapter interface{}, mods queries.Applicator) error {
	var slice []*Chapter
	var object *Chapter

	if singular {
		object = maybeChapter.(*Chapter)
	} else {
		slice = *maybeChapter.(*[]*Chapter)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chapterR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chapterR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`ste.chapter_queue`), qm.WhereIn(`chapter_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load chapter_queue")
	}

	var resultSlice []*ChapterQueue
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice chapter_queue")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on chapter_queue")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chapter_queue")
	}

	if len(chapterQueueAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ChapterQueues = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &chapterQueueR{}
			}
			foreign.R.Chapter = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ChapterID {
				local.R.ChapterQueues = append(local.R.ChapterQueues, foreign)
				if foreign.R == nil {
					foreign.R = &chapterQueueR{}
				}
				foreign.R.Chapter = local
				break
			}
		}
	}

	return nil
}

// AddNovels adds the given related objects to the existing relationships
// of the chapter, optionally inserting them as new records.
// Appends related to o.R.Novels.
// Sets related.R.Chapters appropriately.
func (o *Chapter) AddNovels(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Novel) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"ste\".\"chapter_of_novel\" (\"chapter_id\", \"novel_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &chapterR{
			Novels: related,
		}
	} else {
		o.R.Novels = append(o.R.Novels, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &novelR{
				Chapters: ChapterSlice{o},
			}
		} else {
			rel.R.Chapters = append(rel.R.Chapters, o)
		}
	}
	return nil
}

// SetNovels removes all previously related items of the
// chapter replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Chapters's Novels accordingly.
// Replaces o.R.Novels with related.
// Sets related.R.Chapters's Novels accordingly.
func (o *Chapter) SetNovels(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Novel) error {
	query := "delete from \"ste\".\"chapter_of_novel\" where \"chapter_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeNovelsFromChaptersSlice(o, related)
	if o.R != nil {
		o.R.Novels = nil
	}
	return o.AddNovels(ctx, exec, insert, related...)
}

// RemoveNovels relationships from objects passed in.
// Removes related items from R.Novels (uses pointer comparison, removal does not keep order)
// Sets related.R.Chapters.
func (o *Chapter) RemoveNovels(ctx context.Context, exec boil.ContextExecutor, related ...*Novel) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"ste\".\"chapter_of_novel\" where \"chapter_id\" = $1 and \"novel_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeNovelsFromChaptersSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Novels {
			if rel != ri {
				continue
			}

			ln := len(o.R.Novels)
			if ln > 1 && i < ln-1 {
				o.R.Novels[i] = o.R.Novels[ln-1]
			}
			o.R.Novels = o.R.Novels[:ln-1]
			break
		}
	}

	return nil
}

func removeNovelsFromChaptersSlice(o *Chapter, related []*Novel) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Chapters {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Chapters)
			if ln > 1 && i < ln-1 {
				rel.R.Chapters[i] = rel.R.Chapters[ln-1]
			}
			rel.R.Chapters = rel.R.Chapters[:ln-1]
			break
		}
	}
}

// AddChapterQueues adds the given related objects to the existing relationships
// of the chapter, optionally inserting them as new records.
// Appends related to o.R.ChapterQueues.
// Sets related.R.Chapter appropriately.
func (o *Chapter) AddChapterQueues(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ChapterQueue) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ChapterID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"ste\".\"chapter_queue\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"chapter_id"}),
				strmangle.WhereClause("\"", "\"", 2, chapterQueuePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.NovelID, rel.ChapterID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ChapterID = o.ID
		}
	}

	if o.R == nil {
		o.R = &chapterR{
			ChapterQueues: related,
		}
	} else {
		o.R.ChapterQueues = append(o.R.ChapterQueues, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &chapterQueueR{
				Chapter: o,
			}
		} else {
			rel.R.Chapter = o
		}
	}
	return nil
}

// Chapters retrieves all the records using an executor.
func Chapters(mods ...qm.QueryMod) chapterQuery {
	mods = append(mods, qm.From("\"ste\".\"chapter\""))
	return chapterQuery{NewQuery(mods...)}
}

// FindChapter retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindChapter(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Chapter, error) {
	chapterObj := &Chapter{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"ste\".\"chapter\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, chapterObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from chapter")
	}

	return chapterObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Chapter) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no chapter provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chapterColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	chapterInsertCacheMut.RLock()
	cache, cached := chapterInsertCache[key]
	chapterInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			chapterColumns,
			chapterColumnsWithDefault,
			chapterColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(chapterType, chapterMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(chapterType, chapterMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"ste\".\"chapter\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"ste\".\"chapter\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into chapter")
	}

	if !cached {
		chapterInsertCacheMut.Lock()
		chapterInsertCache[key] = cache
		chapterInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Chapter.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Chapter) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	chapterUpdateCacheMut.RLock()
	cache, cached := chapterUpdateCache[key]
	chapterUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			chapterColumns,
			chapterPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update chapter, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"ste\".\"chapter\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, chapterPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(chapterType, chapterMapping, append(wl, chapterPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update chapter row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for chapter")
	}

	if !cached {
		chapterUpdateCacheMut.Lock()
		chapterUpdateCache[key] = cache
		chapterUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q chapterQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for chapter")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for chapter")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChapterSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chapterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"ste\".\"chapter\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, chapterPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in chapter slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all chapter")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Chapter) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no chapter provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chapterColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	chapterUpsertCacheMut.RLock()
	cache, cached := chapterUpsertCache[key]
	chapterUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			chapterColumns,
			chapterColumnsWithDefault,
			chapterColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			chapterColumns,
			chapterPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert chapter, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(chapterPrimaryKeyColumns))
			copy(conflict, chapterPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"ste\".\"chapter\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(chapterType, chapterMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(chapterType, chapterMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert chapter")
	}

	if !cached {
		chapterUpsertCacheMut.Lock()
		chapterUpsertCache[key] = cache
		chapterUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Chapter record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Chapter) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Chapter provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), chapterPrimaryKeyMapping)
	sql := "DELETE FROM \"ste\".\"chapter\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from chapter")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for chapter")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q chapterQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no chapterQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from chapter")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for chapter")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChapterSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(chapterBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chapterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"ste\".\"chapter\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, chapterPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from chapter slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for chapter")
	}

	if len(chapterAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Chapter) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindChapter(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChapterSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ChapterSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chapterPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"ste\".\"chapter\".* FROM \"ste\".\"chapter\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, chapterPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ChapterSlice")
	}

	*o = slice

	return nil
}

// ChapterExists checks if the Chapter row exists.
func ChapterExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"ste\".\"chapter\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if chapter exists")
	}

	return exists, nil
}
