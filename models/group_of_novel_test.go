// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testGroupOfNovels(t *testing.T) {
	t.Parallel()

	query := GroupOfNovels()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testGroupOfNovelsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupOfNovel{}
	if err = randomize.Struct(seed, o, groupOfNovelDBTypes, true, groupOfNovelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupOfNovel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GroupOfNovels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGroupOfNovelsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupOfNovel{}
	if err = randomize.Struct(seed, o, groupOfNovelDBTypes, true, groupOfNovelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupOfNovel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := GroupOfNovels().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GroupOfNovels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGroupOfNovelsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupOfNovel{}
	if err = randomize.Struct(seed, o, groupOfNovelDBTypes, true, groupOfNovelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupOfNovel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GroupOfNovelSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GroupOfNovels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGroupOfNovelsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupOfNovel{}
	if err = randomize.Struct(seed, o, groupOfNovelDBTypes, true, groupOfNovelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupOfNovel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := GroupOfNovelExists(ctx, tx, o.NovelID, o.GroupID)
	if err != nil {
		t.Errorf("Unable to check if GroupOfNovel exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GroupOfNovelExists to return true, but got false.")
	}
}

func testGroupOfNovelsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupOfNovel{}
	if err = randomize.Struct(seed, o, groupOfNovelDBTypes, true, groupOfNovelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupOfNovel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	groupOfNovelFound, err := FindGroupOfNovel(ctx, tx, o.NovelID, o.GroupID)
	if err != nil {
		t.Error(err)
	}

	if groupOfNovelFound == nil {
		t.Error("want a record, got nil")
	}
}

func testGroupOfNovelsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupOfNovel{}
	if err = randomize.Struct(seed, o, groupOfNovelDBTypes, true, groupOfNovelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupOfNovel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = GroupOfNovels().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testGroupOfNovelsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupOfNovel{}
	if err = randomize.Struct(seed, o, groupOfNovelDBTypes, true, groupOfNovelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupOfNovel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := GroupOfNovels().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGroupOfNovelsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	groupOfNovelOne := &GroupOfNovel{}
	groupOfNovelTwo := &GroupOfNovel{}
	if err = randomize.Struct(seed, groupOfNovelOne, groupOfNovelDBTypes, false, groupOfNovelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupOfNovel struct: %s", err)
	}
	if err = randomize.Struct(seed, groupOfNovelTwo, groupOfNovelDBTypes, false, groupOfNovelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupOfNovel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = groupOfNovelOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = groupOfNovelTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GroupOfNovels().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGroupOfNovelsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	groupOfNovelOne := &GroupOfNovel{}
	groupOfNovelTwo := &GroupOfNovel{}
	if err = randomize.Struct(seed, groupOfNovelOne, groupOfNovelDBTypes, false, groupOfNovelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupOfNovel struct: %s", err)
	}
	if err = randomize.Struct(seed, groupOfNovelTwo, groupOfNovelDBTypes, false, groupOfNovelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupOfNovel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = groupOfNovelOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = groupOfNovelTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GroupOfNovels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func groupOfNovelBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *GroupOfNovel) error {
	*o = GroupOfNovel{}
	return nil
}

func groupOfNovelAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *GroupOfNovel) error {
	*o = GroupOfNovel{}
	return nil
}

func groupOfNovelAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *GroupOfNovel) error {
	*o = GroupOfNovel{}
	return nil
}

func groupOfNovelBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GroupOfNovel) error {
	*o = GroupOfNovel{}
	return nil
}

func groupOfNovelAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GroupOfNovel) error {
	*o = GroupOfNovel{}
	return nil
}

func groupOfNovelBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GroupOfNovel) error {
	*o = GroupOfNovel{}
	return nil
}

func groupOfNovelAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GroupOfNovel) error {
	*o = GroupOfNovel{}
	return nil
}

func groupOfNovelBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GroupOfNovel) error {
	*o = GroupOfNovel{}
	return nil
}

func groupOfNovelAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GroupOfNovel) error {
	*o = GroupOfNovel{}
	return nil
}

func testGroupOfNovelsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &GroupOfNovel{}
	o := &GroupOfNovel{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, groupOfNovelDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GroupOfNovel object: %s", err)
	}

	AddGroupOfNovelHook(boil.BeforeInsertHook, groupOfNovelBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	groupOfNovelBeforeInsertHooks = []GroupOfNovelHook{}

	AddGroupOfNovelHook(boil.AfterInsertHook, groupOfNovelAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	groupOfNovelAfterInsertHooks = []GroupOfNovelHook{}

	AddGroupOfNovelHook(boil.AfterSelectHook, groupOfNovelAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	groupOfNovelAfterSelectHooks = []GroupOfNovelHook{}

	AddGroupOfNovelHook(boil.BeforeUpdateHook, groupOfNovelBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	groupOfNovelBeforeUpdateHooks = []GroupOfNovelHook{}

	AddGroupOfNovelHook(boil.AfterUpdateHook, groupOfNovelAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	groupOfNovelAfterUpdateHooks = []GroupOfNovelHook{}

	AddGroupOfNovelHook(boil.BeforeDeleteHook, groupOfNovelBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	groupOfNovelBeforeDeleteHooks = []GroupOfNovelHook{}

	AddGroupOfNovelHook(boil.AfterDeleteHook, groupOfNovelAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	groupOfNovelAfterDeleteHooks = []GroupOfNovelHook{}

	AddGroupOfNovelHook(boil.BeforeUpsertHook, groupOfNovelBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	groupOfNovelBeforeUpsertHooks = []GroupOfNovelHook{}

	AddGroupOfNovelHook(boil.AfterUpsertHook, groupOfNovelAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	groupOfNovelAfterUpsertHooks = []GroupOfNovelHook{}
}

func testGroupOfNovelsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupOfNovel{}
	if err = randomize.Struct(seed, o, groupOfNovelDBTypes, true, groupOfNovelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupOfNovel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GroupOfNovels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGroupOfNovelsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupOfNovel{}
	if err = randomize.Struct(seed, o, groupOfNovelDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GroupOfNovel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(groupOfNovelColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := GroupOfNovels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGroupOfNovelToOneGroupUsingGroup(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local GroupOfNovel
	var foreign Group

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, groupOfNovelDBTypes, false, groupOfNovelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupOfNovel struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, groupDBTypes, false, groupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Group struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.GroupID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Group().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := GroupOfNovelSlice{&local}
	if err = local.L.LoadGroup(ctx, tx, false, (*[]*GroupOfNovel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Group == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Group = nil
	if err = local.L.LoadGroup(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Group == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testGroupOfNovelToOneNovelUsingNovel(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local GroupOfNovel
	var foreign Novel

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, groupOfNovelDBTypes, false, groupOfNovelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupOfNovel struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, novelDBTypes, false, novelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Novel struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.NovelID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Novel().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := GroupOfNovelSlice{&local}
	if err = local.L.LoadNovel(ctx, tx, false, (*[]*GroupOfNovel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Novel == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Novel = nil
	if err = local.L.LoadNovel(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Novel == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testGroupOfNovelToOneSetOpGroupUsingGroup(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GroupOfNovel
	var b, c Group

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, groupOfNovelDBTypes, false, strmangle.SetComplement(groupOfNovelPrimaryKeyColumns, groupOfNovelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, groupDBTypes, false, strmangle.SetComplement(groupPrimaryKeyColumns, groupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, groupDBTypes, false, strmangle.SetComplement(groupPrimaryKeyColumns, groupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Group{&b, &c} {
		err = a.SetGroup(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Group != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GroupOfNovels[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.GroupID != x.ID {
			t.Error("foreign key was wrong value", a.GroupID)
		}

		if exists, err := GroupOfNovelExists(ctx, tx, a.NovelID, a.GroupID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testGroupOfNovelToOneSetOpNovelUsingNovel(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GroupOfNovel
	var b, c Novel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, groupOfNovelDBTypes, false, strmangle.SetComplement(groupOfNovelPrimaryKeyColumns, groupOfNovelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, novelDBTypes, false, strmangle.SetComplement(novelPrimaryKeyColumns, novelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, novelDBTypes, false, strmangle.SetComplement(novelPrimaryKeyColumns, novelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Novel{&b, &c} {
		err = a.SetNovel(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Novel != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GroupOfNovels[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.NovelID != x.ID {
			t.Error("foreign key was wrong value", a.NovelID)
		}

		if exists, err := GroupOfNovelExists(ctx, tx, a.NovelID, a.GroupID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testGroupOfNovelsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupOfNovel{}
	if err = randomize.Struct(seed, o, groupOfNovelDBTypes, true, groupOfNovelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupOfNovel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGroupOfNovelsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupOfNovel{}
	if err = randomize.Struct(seed, o, groupOfNovelDBTypes, true, groupOfNovelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupOfNovel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GroupOfNovelSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGroupOfNovelsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GroupOfNovel{}
	if err = randomize.Struct(seed, o, groupOfNovelDBTypes, true, groupOfNovelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupOfNovel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GroupOfNovels().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	groupOfNovelDBTypes = map[string]string{`Default`: `boolean`, `GroupID`: `integer`, `NovelID`: `integer`}
	_                   = bytes.MinRead
)

func testGroupOfNovelsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(groupOfNovelPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(groupOfNovelColumns) == len(groupOfNovelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GroupOfNovel{}
	if err = randomize.Struct(seed, o, groupOfNovelDBTypes, true, groupOfNovelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupOfNovel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GroupOfNovels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, groupOfNovelDBTypes, true, groupOfNovelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GroupOfNovel struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testGroupOfNovelsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(groupOfNovelColumns) == len(groupOfNovelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GroupOfNovel{}
	if err = randomize.Struct(seed, o, groupOfNovelDBTypes, true, groupOfNovelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GroupOfNovel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GroupOfNovels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, groupOfNovelDBTypes, true, groupOfNovelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GroupOfNovel struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(groupOfNovelColumns, groupOfNovelPrimaryKeyColumns) {
		fields = groupOfNovelColumns
	} else {
		fields = strmangle.SetComplement(
			groupOfNovelColumns,
			groupOfNovelPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := GroupOfNovelSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testGroupOfNovelsUpsert(t *testing.T) {
	t.Parallel()

	if len(groupOfNovelColumns) == len(groupOfNovelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := GroupOfNovel{}
	if err = randomize.Struct(seed, &o, groupOfNovelDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GroupOfNovel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GroupOfNovel: %s", err)
	}

	count, err := GroupOfNovels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, groupOfNovelDBTypes, false, groupOfNovelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GroupOfNovel struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GroupOfNovel: %s", err)
	}

	count, err = GroupOfNovels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
