// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testChapterQueues(t *testing.T) {
	t.Parallel()

	query := ChapterQueues()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testChapterQueuesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChapterQueue{}
	if err = randomize.Struct(seed, o, chapterQueueDBTypes, true, chapterQueueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChapterQueue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ChapterQueues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChapterQueuesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChapterQueue{}
	if err = randomize.Struct(seed, o, chapterQueueDBTypes, true, chapterQueueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChapterQueue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ChapterQueues().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ChapterQueues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChapterQueuesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChapterQueue{}
	if err = randomize.Struct(seed, o, chapterQueueDBTypes, true, chapterQueueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChapterQueue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ChapterQueueSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ChapterQueues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChapterQueuesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChapterQueue{}
	if err = randomize.Struct(seed, o, chapterQueueDBTypes, true, chapterQueueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChapterQueue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ChapterQueueExists(ctx, tx, o.NovelID, o.ChapterID)
	if err != nil {
		t.Errorf("Unable to check if ChapterQueue exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ChapterQueueExists to return true, but got false.")
	}
}

func testChapterQueuesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChapterQueue{}
	if err = randomize.Struct(seed, o, chapterQueueDBTypes, true, chapterQueueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChapterQueue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	chapterQueueFound, err := FindChapterQueue(ctx, tx, o.NovelID, o.ChapterID)
	if err != nil {
		t.Error(err)
	}

	if chapterQueueFound == nil {
		t.Error("want a record, got nil")
	}
}

func testChapterQueuesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChapterQueue{}
	if err = randomize.Struct(seed, o, chapterQueueDBTypes, true, chapterQueueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChapterQueue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ChapterQueues().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testChapterQueuesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChapterQueue{}
	if err = randomize.Struct(seed, o, chapterQueueDBTypes, true, chapterQueueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChapterQueue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ChapterQueues().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testChapterQueuesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	chapterQueueOne := &ChapterQueue{}
	chapterQueueTwo := &ChapterQueue{}
	if err = randomize.Struct(seed, chapterQueueOne, chapterQueueDBTypes, false, chapterQueueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChapterQueue struct: %s", err)
	}
	if err = randomize.Struct(seed, chapterQueueTwo, chapterQueueDBTypes, false, chapterQueueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChapterQueue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = chapterQueueOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = chapterQueueTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ChapterQueues().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testChapterQueuesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	chapterQueueOne := &ChapterQueue{}
	chapterQueueTwo := &ChapterQueue{}
	if err = randomize.Struct(seed, chapterQueueOne, chapterQueueDBTypes, false, chapterQueueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChapterQueue struct: %s", err)
	}
	if err = randomize.Struct(seed, chapterQueueTwo, chapterQueueDBTypes, false, chapterQueueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChapterQueue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = chapterQueueOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = chapterQueueTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ChapterQueues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func chapterQueueBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ChapterQueue) error {
	*o = ChapterQueue{}
	return nil
}

func chapterQueueAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ChapterQueue) error {
	*o = ChapterQueue{}
	return nil
}

func chapterQueueAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ChapterQueue) error {
	*o = ChapterQueue{}
	return nil
}

func chapterQueueBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ChapterQueue) error {
	*o = ChapterQueue{}
	return nil
}

func chapterQueueAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ChapterQueue) error {
	*o = ChapterQueue{}
	return nil
}

func chapterQueueBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ChapterQueue) error {
	*o = ChapterQueue{}
	return nil
}

func chapterQueueAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ChapterQueue) error {
	*o = ChapterQueue{}
	return nil
}

func chapterQueueBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ChapterQueue) error {
	*o = ChapterQueue{}
	return nil
}

func chapterQueueAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ChapterQueue) error {
	*o = ChapterQueue{}
	return nil
}

func testChapterQueuesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ChapterQueue{}
	o := &ChapterQueue{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, chapterQueueDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ChapterQueue object: %s", err)
	}

	AddChapterQueueHook(boil.BeforeInsertHook, chapterQueueBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	chapterQueueBeforeInsertHooks = []ChapterQueueHook{}

	AddChapterQueueHook(boil.AfterInsertHook, chapterQueueAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	chapterQueueAfterInsertHooks = []ChapterQueueHook{}

	AddChapterQueueHook(boil.AfterSelectHook, chapterQueueAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	chapterQueueAfterSelectHooks = []ChapterQueueHook{}

	AddChapterQueueHook(boil.BeforeUpdateHook, chapterQueueBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	chapterQueueBeforeUpdateHooks = []ChapterQueueHook{}

	AddChapterQueueHook(boil.AfterUpdateHook, chapterQueueAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	chapterQueueAfterUpdateHooks = []ChapterQueueHook{}

	AddChapterQueueHook(boil.BeforeDeleteHook, chapterQueueBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	chapterQueueBeforeDeleteHooks = []ChapterQueueHook{}

	AddChapterQueueHook(boil.AfterDeleteHook, chapterQueueAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	chapterQueueAfterDeleteHooks = []ChapterQueueHook{}

	AddChapterQueueHook(boil.BeforeUpsertHook, chapterQueueBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	chapterQueueBeforeUpsertHooks = []ChapterQueueHook{}

	AddChapterQueueHook(boil.AfterUpsertHook, chapterQueueAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	chapterQueueAfterUpsertHooks = []ChapterQueueHook{}
}

func testChapterQueuesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChapterQueue{}
	if err = randomize.Struct(seed, o, chapterQueueDBTypes, true, chapterQueueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChapterQueue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ChapterQueues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testChapterQueuesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChapterQueue{}
	if err = randomize.Struct(seed, o, chapterQueueDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ChapterQueue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(chapterQueueColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ChapterQueues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testChapterQueueToOneChapterUsingChapter(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ChapterQueue
	var foreign Chapter

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, chapterQueueDBTypes, false, chapterQueueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChapterQueue struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, chapterDBTypes, false, chapterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Chapter struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ChapterID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Chapter().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ChapterQueueSlice{&local}
	if err = local.L.LoadChapter(ctx, tx, false, (*[]*ChapterQueue)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Chapter == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Chapter = nil
	if err = local.L.LoadChapter(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Chapter == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testChapterQueueToOneNovelUsingNovel(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ChapterQueue
	var foreign Novel

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, chapterQueueDBTypes, false, chapterQueueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChapterQueue struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, novelDBTypes, false, novelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Novel struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.NovelID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Novel().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ChapterQueueSlice{&local}
	if err = local.L.LoadNovel(ctx, tx, false, (*[]*ChapterQueue)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Novel == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Novel = nil
	if err = local.L.LoadNovel(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Novel == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testChapterQueueToOneSetOpChapterUsingChapter(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ChapterQueue
	var b, c Chapter

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, chapterQueueDBTypes, false, strmangle.SetComplement(chapterQueuePrimaryKeyColumns, chapterQueueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, chapterDBTypes, false, strmangle.SetComplement(chapterPrimaryKeyColumns, chapterColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, chapterDBTypes, false, strmangle.SetComplement(chapterPrimaryKeyColumns, chapterColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Chapter{&b, &c} {
		err = a.SetChapter(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Chapter != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ChapterQueues[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ChapterID != x.ID {
			t.Error("foreign key was wrong value", a.ChapterID)
		}

		if exists, err := ChapterQueueExists(ctx, tx, a.NovelID, a.ChapterID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testChapterQueueToOneSetOpNovelUsingNovel(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ChapterQueue
	var b, c Novel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, chapterQueueDBTypes, false, strmangle.SetComplement(chapterQueuePrimaryKeyColumns, chapterQueueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, novelDBTypes, false, strmangle.SetComplement(novelPrimaryKeyColumns, novelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, novelDBTypes, false, strmangle.SetComplement(novelPrimaryKeyColumns, novelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Novel{&b, &c} {
		err = a.SetNovel(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Novel != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ChapterQueues[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.NovelID != x.ID {
			t.Error("foreign key was wrong value", a.NovelID)
		}

		if exists, err := ChapterQueueExists(ctx, tx, a.NovelID, a.ChapterID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testChapterQueuesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChapterQueue{}
	if err = randomize.Struct(seed, o, chapterQueueDBTypes, true, chapterQueueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChapterQueue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testChapterQueuesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChapterQueue{}
	if err = randomize.Struct(seed, o, chapterQueueDBTypes, true, chapterQueueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChapterQueue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ChapterQueueSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testChapterQueuesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ChapterQueue{}
	if err = randomize.Struct(seed, o, chapterQueueDBTypes, true, chapterQueueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChapterQueue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ChapterQueues().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	chapterQueueDBTypes = map[string]string{`ChapterID`: `integer`, `Finished`: `boolean`, `FinishedAt`: `date`, `NovelID`: `integer`, `QueuedAt`: `date`}
	_                   = bytes.MinRead
)

func testChapterQueuesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(chapterQueuePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(chapterQueueColumns) == len(chapterQueuePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ChapterQueue{}
	if err = randomize.Struct(seed, o, chapterQueueDBTypes, true, chapterQueueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChapterQueue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ChapterQueues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, chapterQueueDBTypes, true, chapterQueuePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ChapterQueue struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testChapterQueuesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(chapterQueueColumns) == len(chapterQueuePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ChapterQueue{}
	if err = randomize.Struct(seed, o, chapterQueueDBTypes, true, chapterQueueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ChapterQueue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ChapterQueues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, chapterQueueDBTypes, true, chapterQueuePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ChapterQueue struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(chapterQueueColumns, chapterQueuePrimaryKeyColumns) {
		fields = chapterQueueColumns
	} else {
		fields = strmangle.SetComplement(
			chapterQueueColumns,
			chapterQueuePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ChapterQueueSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testChapterQueuesUpsert(t *testing.T) {
	t.Parallel()

	if len(chapterQueueColumns) == len(chapterQueuePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ChapterQueue{}
	if err = randomize.Struct(seed, &o, chapterQueueDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ChapterQueue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ChapterQueue: %s", err)
	}

	count, err := ChapterQueues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, chapterQueueDBTypes, false, chapterQueuePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ChapterQueue struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ChapterQueue: %s", err)
	}

	count, err = ChapterQueues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
