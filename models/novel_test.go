// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testNovels(t *testing.T) {
	t.Parallel()

	query := Novels()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testNovelsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Novel{}
	if err = randomize.Struct(seed, o, novelDBTypes, true, novelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Novel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Novels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNovelsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Novel{}
	if err = randomize.Struct(seed, o, novelDBTypes, true, novelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Novel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Novels().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Novels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNovelsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Novel{}
	if err = randomize.Struct(seed, o, novelDBTypes, true, novelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Novel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NovelSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Novels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNovelsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Novel{}
	if err = randomize.Struct(seed, o, novelDBTypes, true, novelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Novel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := NovelExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Novel exists: %s", err)
	}
	if !e {
		t.Errorf("Expected NovelExists to return true, but got false.")
	}
}

func testNovelsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Novel{}
	if err = randomize.Struct(seed, o, novelDBTypes, true, novelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Novel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	novelFound, err := FindNovel(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if novelFound == nil {
		t.Error("want a record, got nil")
	}
}

func testNovelsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Novel{}
	if err = randomize.Struct(seed, o, novelDBTypes, true, novelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Novel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Novels().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testNovelsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Novel{}
	if err = randomize.Struct(seed, o, novelDBTypes, true, novelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Novel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Novels().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testNovelsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	novelOne := &Novel{}
	novelTwo := &Novel{}
	if err = randomize.Struct(seed, novelOne, novelDBTypes, false, novelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Novel struct: %s", err)
	}
	if err = randomize.Struct(seed, novelTwo, novelDBTypes, false, novelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Novel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = novelOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = novelTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Novels().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testNovelsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	novelOne := &Novel{}
	novelTwo := &Novel{}
	if err = randomize.Struct(seed, novelOne, novelDBTypes, false, novelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Novel struct: %s", err)
	}
	if err = randomize.Struct(seed, novelTwo, novelDBTypes, false, novelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Novel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = novelOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = novelTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Novels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func novelBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Novel) error {
	*o = Novel{}
	return nil
}

func novelAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Novel) error {
	*o = Novel{}
	return nil
}

func novelAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Novel) error {
	*o = Novel{}
	return nil
}

func novelBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Novel) error {
	*o = Novel{}
	return nil
}

func novelAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Novel) error {
	*o = Novel{}
	return nil
}

func novelBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Novel) error {
	*o = Novel{}
	return nil
}

func novelAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Novel) error {
	*o = Novel{}
	return nil
}

func novelBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Novel) error {
	*o = Novel{}
	return nil
}

func novelAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Novel) error {
	*o = Novel{}
	return nil
}

func testNovelsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Novel{}
	o := &Novel{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, novelDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Novel object: %s", err)
	}

	AddNovelHook(boil.BeforeInsertHook, novelBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	novelBeforeInsertHooks = []NovelHook{}

	AddNovelHook(boil.AfterInsertHook, novelAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	novelAfterInsertHooks = []NovelHook{}

	AddNovelHook(boil.AfterSelectHook, novelAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	novelAfterSelectHooks = []NovelHook{}

	AddNovelHook(boil.BeforeUpdateHook, novelBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	novelBeforeUpdateHooks = []NovelHook{}

	AddNovelHook(boil.AfterUpdateHook, novelAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	novelAfterUpdateHooks = []NovelHook{}

	AddNovelHook(boil.BeforeDeleteHook, novelBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	novelBeforeDeleteHooks = []NovelHook{}

	AddNovelHook(boil.AfterDeleteHook, novelAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	novelAfterDeleteHooks = []NovelHook{}

	AddNovelHook(boil.BeforeUpsertHook, novelBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	novelBeforeUpsertHooks = []NovelHook{}

	AddNovelHook(boil.AfterUpsertHook, novelAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	novelAfterUpsertHooks = []NovelHook{}
}

func testNovelsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Novel{}
	if err = randomize.Struct(seed, o, novelDBTypes, true, novelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Novel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Novels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNovelsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Novel{}
	if err = randomize.Struct(seed, o, novelDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Novel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(novelColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Novels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNovelToManyAuthors(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Novel
	var b, c Author

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, novelDBTypes, true, novelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Novel struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, authorDBTypes, false, authorColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, authorDBTypes, false, authorColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"ste\".\"author_of_novel\" (\"novel_id\", \"author_id\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"ste\".\"author_of_novel\" (\"novel_id\", \"author_id\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.Authors().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := NovelSlice{&a}
	if err = a.L.LoadAuthors(ctx, tx, false, (*[]*Novel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Authors); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Authors = nil
	if err = a.L.LoadAuthors(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Authors); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testNovelToManyChapters(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Novel
	var b, c Chapter

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, novelDBTypes, true, novelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Novel struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, chapterDBTypes, false, chapterColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, chapterDBTypes, false, chapterColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"ste\".\"chapter_of_novel\" (\"novel_id\", \"chapter_id\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"ste\".\"chapter_of_novel\" (\"novel_id\", \"chapter_id\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.Chapters().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := NovelSlice{&a}
	if err = a.L.LoadChapters(ctx, tx, false, (*[]*Novel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Chapters); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Chapters = nil
	if err = a.L.LoadChapters(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Chapters); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testNovelToManyChapterQueues(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Novel
	var b, c ChapterQueue

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, novelDBTypes, true, novelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Novel struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, chapterQueueDBTypes, false, chapterQueueColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, chapterQueueDBTypes, false, chapterQueueColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.NovelID = a.ID
	c.NovelID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ChapterQueues().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.NovelID == b.NovelID {
			bFound = true
		}
		if v.NovelID == c.NovelID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := NovelSlice{&a}
	if err = a.L.LoadChapterQueues(ctx, tx, false, (*[]*Novel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ChapterQueues); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ChapterQueues = nil
	if err = a.L.LoadChapterQueues(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ChapterQueues); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testNovelToManyGenres(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Novel
	var b, c Genre

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, novelDBTypes, true, novelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Novel struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, genreDBTypes, false, genreColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, genreDBTypes, false, genreColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"ste\".\"genre_of_novel\" (\"novel_id\", \"genre_id\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"ste\".\"genre_of_novel\" (\"novel_id\", \"genre_id\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.Genres().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := NovelSlice{&a}
	if err = a.L.LoadGenres(ctx, tx, false, (*[]*Novel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Genres); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Genres = nil
	if err = a.L.LoadGenres(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Genres); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testNovelToManyNovelQueues(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Novel
	var b, c NovelQueue

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, novelDBTypes, true, novelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Novel struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, novelQueueDBTypes, false, novelQueueColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, novelQueueDBTypes, false, novelQueueColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.NovelID = a.ID
	c.NovelID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.NovelQueues().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.NovelID == b.NovelID {
			bFound = true
		}
		if v.NovelID == c.NovelID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := NovelSlice{&a}
	if err = a.L.LoadNovelQueues(ctx, tx, false, (*[]*Novel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.NovelQueues); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.NovelQueues = nil
	if err = a.L.LoadNovelQueues(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.NovelQueues); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testNovelToManyRecommendedNovelNovels(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Novel
	var b, c Novel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, novelDBTypes, true, novelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Novel struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, novelDBTypes, false, novelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, novelDBTypes, false, novelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"ste\".\"recommendation\" (\"novel_id\", \"recommended_novel_id\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"ste\".\"recommendation\" (\"novel_id\", \"recommended_novel_id\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.RecommendedNovelNovels().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := NovelSlice{&a}
	if err = a.L.LoadRecommendedNovelNovels(ctx, tx, false, (*[]*Novel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RecommendedNovelNovels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RecommendedNovelNovels = nil
	if err = a.L.LoadRecommendedNovelNovels(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RecommendedNovelNovels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testNovelToManyNovels(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Novel
	var b, c Novel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, novelDBTypes, true, novelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Novel struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, novelDBTypes, false, novelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, novelDBTypes, false, novelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"ste\".\"recommendation\" (\"recommended_novel_id\", \"novel_id\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"ste\".\"recommendation\" (\"recommended_novel_id\", \"novel_id\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.Novels().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := NovelSlice{&a}
	if err = a.L.LoadNovels(ctx, tx, false, (*[]*Novel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Novels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Novels = nil
	if err = a.L.LoadNovels(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Novels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testNovelToManyTags(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Novel
	var b, c Tag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, novelDBTypes, true, novelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Novel struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, tagDBTypes, false, tagColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tagDBTypes, false, tagColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"ste\".\"tag_of_novel\" (\"novel_id\", \"tag_id\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"ste\".\"tag_of_novel\" (\"novel_id\", \"tag_id\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.Tags().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := NovelSlice{&a}
	if err = a.L.LoadTags(ctx, tx, false, (*[]*Novel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Tags); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Tags = nil
	if err = a.L.LoadTags(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Tags); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testNovelToManyAddOpAuthors(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Novel
	var b, c, d, e Author

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, novelDBTypes, false, strmangle.SetComplement(novelPrimaryKeyColumns, novelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Author{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, authorDBTypes, false, strmangle.SetComplement(authorPrimaryKeyColumns, authorColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Author{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAuthors(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Novels[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Novels[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Authors[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Authors[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Authors().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testNovelToManySetOpAuthors(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Novel
	var b, c, d, e Author

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, novelDBTypes, false, strmangle.SetComplement(novelPrimaryKeyColumns, novelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Author{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, authorDBTypes, false, strmangle.SetComplement(authorPrimaryKeyColumns, authorColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetAuthors(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Authors().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetAuthors(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Authors().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Novels) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Novels) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Novels[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Novels[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Authors[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Authors[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testNovelToManyRemoveOpAuthors(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Novel
	var b, c, d, e Author

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, novelDBTypes, false, strmangle.SetComplement(novelPrimaryKeyColumns, novelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Author{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, authorDBTypes, false, strmangle.SetComplement(authorPrimaryKeyColumns, authorColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddAuthors(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Authors().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveAuthors(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Authors().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Novels) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Novels) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Novels[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Novels[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Authors) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Authors[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Authors[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testNovelToManyAddOpChapters(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Novel
	var b, c, d, e Chapter

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, novelDBTypes, false, strmangle.SetComplement(novelPrimaryKeyColumns, novelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Chapter{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, chapterDBTypes, false, strmangle.SetComplement(chapterPrimaryKeyColumns, chapterColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Chapter{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddChapters(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Novels[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Novels[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Chapters[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Chapters[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Chapters().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testNovelToManySetOpChapters(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Novel
	var b, c, d, e Chapter

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, novelDBTypes, false, strmangle.SetComplement(novelPrimaryKeyColumns, novelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Chapter{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, chapterDBTypes, false, strmangle.SetComplement(chapterPrimaryKeyColumns, chapterColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetChapters(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Chapters().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetChapters(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Chapters().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Novels) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Novels) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Novels[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Novels[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Chapters[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Chapters[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testNovelToManyRemoveOpChapters(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Novel
	var b, c, d, e Chapter

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, novelDBTypes, false, strmangle.SetComplement(novelPrimaryKeyColumns, novelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Chapter{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, chapterDBTypes, false, strmangle.SetComplement(chapterPrimaryKeyColumns, chapterColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddChapters(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Chapters().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveChapters(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Chapters().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Novels) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Novels) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Novels[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Novels[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Chapters) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Chapters[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Chapters[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testNovelToManyAddOpChapterQueues(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Novel
	var b, c, d, e ChapterQueue

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, novelDBTypes, false, strmangle.SetComplement(novelPrimaryKeyColumns, novelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ChapterQueue{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, chapterQueueDBTypes, false, strmangle.SetComplement(chapterQueuePrimaryKeyColumns, chapterQueueColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ChapterQueue{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddChapterQueues(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.NovelID {
			t.Error("foreign key was wrong value", a.ID, first.NovelID)
		}
		if a.ID != second.NovelID {
			t.Error("foreign key was wrong value", a.ID, second.NovelID)
		}

		if first.R.Novel != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Novel != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ChapterQueues[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ChapterQueues[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ChapterQueues().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testNovelToManyAddOpGenres(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Novel
	var b, c, d, e Genre

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, novelDBTypes, false, strmangle.SetComplement(novelPrimaryKeyColumns, novelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Genre{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, genreDBTypes, false, strmangle.SetComplement(genrePrimaryKeyColumns, genreColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Genre{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGenres(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Novels[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Novels[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Genres[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Genres[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Genres().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testNovelToManySetOpGenres(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Novel
	var b, c, d, e Genre

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, novelDBTypes, false, strmangle.SetComplement(novelPrimaryKeyColumns, novelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Genre{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, genreDBTypes, false, strmangle.SetComplement(genrePrimaryKeyColumns, genreColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetGenres(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Genres().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetGenres(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Genres().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Novels) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Novels) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Novels[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Novels[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Genres[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Genres[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testNovelToManyRemoveOpGenres(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Novel
	var b, c, d, e Genre

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, novelDBTypes, false, strmangle.SetComplement(novelPrimaryKeyColumns, novelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Genre{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, genreDBTypes, false, strmangle.SetComplement(genrePrimaryKeyColumns, genreColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddGenres(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Genres().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveGenres(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Genres().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Novels) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Novels) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Novels[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Novels[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Genres) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Genres[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Genres[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testNovelToManyAddOpNovelQueues(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Novel
	var b, c, d, e NovelQueue

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, novelDBTypes, false, strmangle.SetComplement(novelPrimaryKeyColumns, novelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*NovelQueue{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, novelQueueDBTypes, false, strmangle.SetComplement(novelQueuePrimaryKeyColumns, novelQueueColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*NovelQueue{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddNovelQueues(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.NovelID {
			t.Error("foreign key was wrong value", a.ID, first.NovelID)
		}
		if a.ID != second.NovelID {
			t.Error("foreign key was wrong value", a.ID, second.NovelID)
		}

		if first.R.Novel != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Novel != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.NovelQueues[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.NovelQueues[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.NovelQueues().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testNovelToManyAddOpRecommendedNovelNovels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Novel
	var b, c, d, e Novel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, novelDBTypes, false, strmangle.SetComplement(novelPrimaryKeyColumns, novelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Novel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, novelDBTypes, false, strmangle.SetComplement(novelPrimaryKeyColumns, novelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Novel{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRecommendedNovelNovels(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Novels[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Novels[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.RecommendedNovelNovels[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RecommendedNovelNovels[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RecommendedNovelNovels().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testNovelToManySetOpRecommendedNovelNovels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Novel
	var b, c, d, e Novel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, novelDBTypes, false, strmangle.SetComplement(novelPrimaryKeyColumns, novelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Novel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, novelDBTypes, false, strmangle.SetComplement(novelPrimaryKeyColumns, novelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetRecommendedNovelNovels(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RecommendedNovelNovels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetRecommendedNovelNovels(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RecommendedNovelNovels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Novels) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Novels) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Novels[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Novels[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.RecommendedNovelNovels[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.RecommendedNovelNovels[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testNovelToManyRemoveOpRecommendedNovelNovels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Novel
	var b, c, d, e Novel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, novelDBTypes, false, strmangle.SetComplement(novelPrimaryKeyColumns, novelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Novel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, novelDBTypes, false, strmangle.SetComplement(novelPrimaryKeyColumns, novelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddRecommendedNovelNovels(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RecommendedNovelNovels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveRecommendedNovelNovels(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RecommendedNovelNovels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Novels) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Novels) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Novels[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Novels[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.RecommendedNovelNovels) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.RecommendedNovelNovels[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.RecommendedNovelNovels[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testNovelToManyAddOpNovels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Novel
	var b, c, d, e Novel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, novelDBTypes, false, strmangle.SetComplement(novelPrimaryKeyColumns, novelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Novel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, novelDBTypes, false, strmangle.SetComplement(novelPrimaryKeyColumns, novelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Novel{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddNovels(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.RecommendedNovelNovels[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.RecommendedNovelNovels[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Novels[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Novels[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Novels().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testNovelToManySetOpNovels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Novel
	var b, c, d, e Novel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, novelDBTypes, false, strmangle.SetComplement(novelPrimaryKeyColumns, novelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Novel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, novelDBTypes, false, strmangle.SetComplement(novelPrimaryKeyColumns, novelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetNovels(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Novels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetNovels(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Novels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.RecommendedNovelNovels) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.RecommendedNovelNovels) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.RecommendedNovelNovels[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.RecommendedNovelNovels[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Novels[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Novels[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testNovelToManyRemoveOpNovels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Novel
	var b, c, d, e Novel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, novelDBTypes, false, strmangle.SetComplement(novelPrimaryKeyColumns, novelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Novel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, novelDBTypes, false, strmangle.SetComplement(novelPrimaryKeyColumns, novelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddNovels(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Novels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveNovels(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Novels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.RecommendedNovelNovels) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.RecommendedNovelNovels) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.RecommendedNovelNovels[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.RecommendedNovelNovels[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Novels) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Novels[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Novels[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testNovelToManyAddOpTags(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Novel
	var b, c, d, e Tag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, novelDBTypes, false, strmangle.SetComplement(novelPrimaryKeyColumns, novelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Tag{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tagDBTypes, false, strmangle.SetComplement(tagPrimaryKeyColumns, tagColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Tag{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTags(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Novels[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Novels[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Tags[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Tags[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Tags().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testNovelToManySetOpTags(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Novel
	var b, c, d, e Tag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, novelDBTypes, false, strmangle.SetComplement(novelPrimaryKeyColumns, novelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Tag{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tagDBTypes, false, strmangle.SetComplement(tagPrimaryKeyColumns, tagColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetTags(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Tags().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetTags(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Tags().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Novels) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Novels) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Novels[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Novels[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Tags[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Tags[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testNovelToManyRemoveOpTags(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Novel
	var b, c, d, e Tag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, novelDBTypes, false, strmangle.SetComplement(novelPrimaryKeyColumns, novelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Tag{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tagDBTypes, false, strmangle.SetComplement(tagPrimaryKeyColumns, tagColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddTags(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Tags().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveTags(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Tags().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Novels) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Novels) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Novels[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Novels[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Tags) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Tags[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Tags[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testNovelToOneCoverUsingCover(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Novel
	var foreign Cover

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, novelDBTypes, true, novelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Novel struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, coverDBTypes, false, coverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cover struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CoverID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Cover().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := NovelSlice{&local}
	if err = local.L.LoadCover(ctx, tx, false, (*[]*Novel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Cover == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Cover = nil
	if err = local.L.LoadCover(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Cover == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testNovelToOneLanguageUsingLanguage(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Novel
	var foreign Language

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, novelDBTypes, true, novelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Novel struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, languageDBTypes, false, languageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Language struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.LanguageID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Language().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := NovelSlice{&local}
	if err = local.L.LoadLanguage(ctx, tx, false, (*[]*Novel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Language == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Language = nil
	if err = local.L.LoadLanguage(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Language == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testNovelToOneNovelTypeUsingNtype(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Novel
	var foreign NovelType

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, novelDBTypes, true, novelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Novel struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, novelTypeDBTypes, false, novelTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize NovelType struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.NtypeID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Ntype().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := NovelSlice{&local}
	if err = local.L.LoadNtype(ctx, tx, false, (*[]*Novel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Ntype == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Ntype = nil
	if err = local.L.LoadNtype(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Ntype == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testNovelToOneGroupUsingGroup(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Novel
	var foreign Group

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, novelDBTypes, true, novelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Novel struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, groupDBTypes, false, groupColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Group struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.GroupID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Group().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := NovelSlice{&local}
	if err = local.L.LoadGroup(ctx, tx, false, (*[]*Novel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Group == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Group = nil
	if err = local.L.LoadGroup(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Group == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testNovelToOneSetOpCoverUsingCover(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Novel
	var b, c Cover

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, novelDBTypes, false, strmangle.SetComplement(novelPrimaryKeyColumns, novelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, coverDBTypes, false, strmangle.SetComplement(coverPrimaryKeyColumns, coverColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, coverDBTypes, false, strmangle.SetComplement(coverPrimaryKeyColumns, coverColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Cover{&b, &c} {
		err = a.SetCover(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Cover != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Novels[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CoverID, x.ID) {
			t.Error("foreign key was wrong value", a.CoverID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CoverID))
		reflect.Indirect(reflect.ValueOf(&a.CoverID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CoverID, x.ID) {
			t.Error("foreign key was wrong value", a.CoverID, x.ID)
		}
	}
}

func testNovelToOneRemoveOpCoverUsingCover(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Novel
	var b Cover

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, novelDBTypes, false, strmangle.SetComplement(novelPrimaryKeyColumns, novelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, coverDBTypes, false, strmangle.SetComplement(coverPrimaryKeyColumns, coverColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCover(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCover(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Cover().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Cover != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CoverID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Novels) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testNovelToOneSetOpLanguageUsingLanguage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Novel
	var b, c Language

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, novelDBTypes, false, strmangle.SetComplement(novelPrimaryKeyColumns, novelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, languageDBTypes, false, strmangle.SetComplement(languagePrimaryKeyColumns, languageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, languageDBTypes, false, strmangle.SetComplement(languagePrimaryKeyColumns, languageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Language{&b, &c} {
		err = a.SetLanguage(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Language != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Novels[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.LanguageID, x.ID) {
			t.Error("foreign key was wrong value", a.LanguageID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.LanguageID))
		reflect.Indirect(reflect.ValueOf(&a.LanguageID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.LanguageID, x.ID) {
			t.Error("foreign key was wrong value", a.LanguageID, x.ID)
		}
	}
}

func testNovelToOneRemoveOpLanguageUsingLanguage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Novel
	var b Language

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, novelDBTypes, false, strmangle.SetComplement(novelPrimaryKeyColumns, novelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, languageDBTypes, false, strmangle.SetComplement(languagePrimaryKeyColumns, languageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetLanguage(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveLanguage(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Language().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Language != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.LanguageID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Novels) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testNovelToOneSetOpNovelTypeUsingNtype(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Novel
	var b, c NovelType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, novelDBTypes, false, strmangle.SetComplement(novelPrimaryKeyColumns, novelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, novelTypeDBTypes, false, strmangle.SetComplement(novelTypePrimaryKeyColumns, novelTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, novelTypeDBTypes, false, strmangle.SetComplement(novelTypePrimaryKeyColumns, novelTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*NovelType{&b, &c} {
		err = a.SetNtype(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Ntype != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.NtypeNovels[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.NtypeID, x.ID) {
			t.Error("foreign key was wrong value", a.NtypeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.NtypeID))
		reflect.Indirect(reflect.ValueOf(&a.NtypeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.NtypeID, x.ID) {
			t.Error("foreign key was wrong value", a.NtypeID, x.ID)
		}
	}
}

func testNovelToOneRemoveOpNovelTypeUsingNtype(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Novel
	var b NovelType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, novelDBTypes, false, strmangle.SetComplement(novelPrimaryKeyColumns, novelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, novelTypeDBTypes, false, strmangle.SetComplement(novelTypePrimaryKeyColumns, novelTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetNtype(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveNtype(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Ntype().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Ntype != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.NtypeID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.NtypeNovels) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testNovelToOneSetOpGroupUsingGroup(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Novel
	var b, c Group

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, novelDBTypes, false, strmangle.SetComplement(novelPrimaryKeyColumns, novelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, groupDBTypes, false, strmangle.SetComplement(groupPrimaryKeyColumns, groupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, groupDBTypes, false, strmangle.SetComplement(groupPrimaryKeyColumns, groupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Group{&b, &c} {
		err = a.SetGroup(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Group != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GroupNovels[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.GroupID, x.ID) {
			t.Error("foreign key was wrong value", a.GroupID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GroupID))
		reflect.Indirect(reflect.ValueOf(&a.GroupID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.GroupID, x.ID) {
			t.Error("foreign key was wrong value", a.GroupID, x.ID)
		}
	}
}

func testNovelToOneRemoveOpGroupUsingGroup(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Novel
	var b Group

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, novelDBTypes, false, strmangle.SetComplement(novelPrimaryKeyColumns, novelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, groupDBTypes, false, strmangle.SetComplement(groupPrimaryKeyColumns, groupColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetGroup(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveGroup(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Group().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Group != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.GroupID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.GroupNovels) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testNovelsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Novel{}
	if err = randomize.Struct(seed, o, novelDBTypes, true, novelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Novel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNovelsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Novel{}
	if err = randomize.Struct(seed, o, novelDBTypes, true, novelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Novel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := NovelSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testNovelsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Novel{}
	if err = randomize.Struct(seed, o, novelDBTypes, true, novelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Novel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Novels().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	novelDBTypes = map[string]string{`ID`: `integer`, `Title`: `text`, `Chaptercount`: `integer`, `NovelIDSTR`: `text`, `NtypeID`: `integer`, `Description`: `text`, `LanguageID`: `integer`, `Year`: `integer`, `Status`: `integer`, `Licensed`: `boolean`, `CompletlyTranslated`: `boolean`, `CoverID`: `integer`, `UpdatedAt`: `date`, `FetchedAt`: `date`, `GroupID`: `integer`}
	_            = bytes.MinRead
)

func testNovelsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(novelPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(novelColumns) == len(novelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Novel{}
	if err = randomize.Struct(seed, o, novelDBTypes, true, novelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Novel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Novels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, novelDBTypes, true, novelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Novel struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testNovelsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(novelColumns) == len(novelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Novel{}
	if err = randomize.Struct(seed, o, novelDBTypes, true, novelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Novel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Novels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, novelDBTypes, true, novelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Novel struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(novelColumns, novelPrimaryKeyColumns) {
		fields = novelColumns
	} else {
		fields = strmangle.SetComplement(
			novelColumns,
			novelPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := NovelSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testNovelsUpsert(t *testing.T) {
	t.Parallel()

	if len(novelColumns) == len(novelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Novel{}
	if err = randomize.Struct(seed, &o, novelDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Novel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Novel: %s", err)
	}

	count, err := Novels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, novelDBTypes, false, novelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Novel struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Novel: %s", err)
	}

	count, err = Novels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
