// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Novel is an object representing the database table.
type Novel struct {
	Chaptercount        null.Int    `boil:"chaptercount" json:"chaptercount,omitempty" toml:"chaptercount" yaml:"chaptercount,omitempty"`
	CompletlyTranslated null.Bool   `boil:"completly_translated" json:"completly_translated,omitempty" toml:"completly_translated" yaml:"completly_translated,omitempty"`
	CoverID             null.Int    `boil:"cover_id" json:"cover_id,omitempty" toml:"cover_id" yaml:"cover_id,omitempty"`
	Description         null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	FetchedAt           time.Time   `boil:"fetchedAt" json:"fetchedAt" toml:"fetchedAt" yaml:"fetchedAt"`
	ID                  int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	LanguageID          null.Int    `boil:"language_id" json:"language_id,omitempty" toml:"language_id" yaml:"language_id,omitempty"`
	Licensed            null.Bool   `boil:"licensed" json:"licensed,omitempty" toml:"licensed" yaml:"licensed,omitempty"`
	NovelIDSTR          string      `boil:"novel_id_str" json:"novel_id_str" toml:"novel_id_str" yaml:"novel_id_str"`
	NtypeID             null.Int    `boil:"ntype_id" json:"ntype_id,omitempty" toml:"ntype_id" yaml:"ntype_id,omitempty"`
	Status              null.Int    `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	Title               string      `boil:"title" json:"title" toml:"title" yaml:"title"`
	UpdatedAt           null.Time   `boil:"updatedAt" json:"updatedAt,omitempty" toml:"updatedAt" yaml:"updatedAt,omitempty"`
	Year                null.Int    `boil:"year" json:"year,omitempty" toml:"year" yaml:"year,omitempty"`

	R *novelR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L novelL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var NovelColumns = struct {
	Chaptercount        string
	CompletlyTranslated string
	CoverID             string
	Description         string
	FetchedAt           string
	ID                  string
	LanguageID          string
	Licensed            string
	NovelIDSTR          string
	NtypeID             string
	Status              string
	Title               string
	UpdatedAt           string
	Year                string
}{
	Chaptercount:        "chaptercount",
	CompletlyTranslated: "completly_translated",
	CoverID:             "cover_id",
	Description:         "description",
	FetchedAt:           "fetchedAt",
	ID:                  "id",
	LanguageID:          "language_id",
	Licensed:            "licensed",
	NovelIDSTR:          "novel_id_str",
	NtypeID:             "ntype_id",
	Status:              "status",
	Title:               "title",
	UpdatedAt:           "updatedAt",
	Year:                "year",
}

// Generated where

var NovelWhere = struct {
	Chaptercount        whereHelpernull_Int
	CompletlyTranslated whereHelpernull_Bool
	CoverID             whereHelpernull_Int
	Description         whereHelpernull_String
	FetchedAt           whereHelpertime_Time
	ID                  whereHelperint
	LanguageID          whereHelpernull_Int
	Licensed            whereHelpernull_Bool
	NovelIDSTR          whereHelperstring
	NtypeID             whereHelpernull_Int
	Status              whereHelpernull_Int
	Title               whereHelperstring
	UpdatedAt           whereHelpernull_Time
	Year                whereHelpernull_Int
}{
	Chaptercount:        whereHelpernull_Int{field: "\"ste\".\"novel\".\"chaptercount\""},
	CompletlyTranslated: whereHelpernull_Bool{field: "\"ste\".\"novel\".\"completly_translated\""},
	CoverID:             whereHelpernull_Int{field: "\"ste\".\"novel\".\"cover_id\""},
	Description:         whereHelpernull_String{field: "\"ste\".\"novel\".\"description\""},
	FetchedAt:           whereHelpertime_Time{field: "\"ste\".\"novel\".\"fetchedAt\""},
	ID:                  whereHelperint{field: "\"ste\".\"novel\".\"id\""},
	LanguageID:          whereHelpernull_Int{field: "\"ste\".\"novel\".\"language_id\""},
	Licensed:            whereHelpernull_Bool{field: "\"ste\".\"novel\".\"licensed\""},
	NovelIDSTR:          whereHelperstring{field: "\"ste\".\"novel\".\"novel_id_str\""},
	NtypeID:             whereHelpernull_Int{field: "\"ste\".\"novel\".\"ntype_id\""},
	Status:              whereHelpernull_Int{field: "\"ste\".\"novel\".\"status\""},
	Title:               whereHelperstring{field: "\"ste\".\"novel\".\"title\""},
	UpdatedAt:           whereHelpernull_Time{field: "\"ste\".\"novel\".\"updatedAt\""},
	Year:                whereHelpernull_Int{field: "\"ste\".\"novel\".\"year\""},
}

// NovelRels is where relationship names are stored.
var NovelRels = struct {
	Cover         string
	Language      string
	Ntype         string
	Authors       string
	Chapters      string
	ChapterQueues string
	Genres        string
	GroupOfNovels string
	NovelQueues   string
	Tags          string
}{
	Cover:         "Cover",
	Language:      "Language",
	Ntype:         "Ntype",
	Authors:       "Authors",
	Chapters:      "Chapters",
	ChapterQueues: "ChapterQueues",
	Genres:        "Genres",
	GroupOfNovels: "GroupOfNovels",
	NovelQueues:   "NovelQueues",
	Tags:          "Tags",
}

// novelR is where relationships are stored.
type novelR struct {
	Cover         *Cover
	Language      *Language
	Ntype         *NovelType
	Authors       AuthorSlice
	Chapters      ChapterSlice
	ChapterQueues ChapterQueueSlice
	Genres        GenreSlice
	GroupOfNovels GroupOfNovelSlice
	NovelQueues   NovelQueueSlice
	Tags          TagSlice
}

// NewStruct creates a new relationship struct
func (*novelR) NewStruct() *novelR {
	return &novelR{}
}

// novelL is where Load methods for each relationship are stored.
type novelL struct{}

var (
	novelColumns               = []string{"chaptercount", "completly_translated", "cover_id", "description", "fetchedAt", "id", "language_id", "licensed", "novel_id_str", "ntype_id", "status", "title", "updatedAt", "year"}
	novelColumnsWithoutDefault = []string{"chaptercount", "completly_translated", "cover_id", "description", "fetchedAt", "language_id", "licensed", "novel_id_str", "ntype_id", "status", "title", "updatedAt", "year"}
	novelColumnsWithDefault    = []string{"id"}
	novelPrimaryKeyColumns     = []string{"id"}
)

type (
	// NovelSlice is an alias for a slice of pointers to Novel.
	// This should generally be used opposed to []Novel.
	NovelSlice []*Novel
	// NovelHook is the signature for custom Novel hook methods
	NovelHook func(context.Context, boil.ContextExecutor, *Novel) error

	novelQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	novelType                 = reflect.TypeOf(&Novel{})
	novelMapping              = queries.MakeStructMapping(novelType)
	novelPrimaryKeyMapping, _ = queries.BindMapping(novelType, novelMapping, novelPrimaryKeyColumns)
	novelInsertCacheMut       sync.RWMutex
	novelInsertCache          = make(map[string]insertCache)
	novelUpdateCacheMut       sync.RWMutex
	novelUpdateCache          = make(map[string]updateCache)
	novelUpsertCacheMut       sync.RWMutex
	novelUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var novelBeforeInsertHooks []NovelHook
var novelBeforeUpdateHooks []NovelHook
var novelBeforeDeleteHooks []NovelHook
var novelBeforeUpsertHooks []NovelHook

var novelAfterInsertHooks []NovelHook
var novelAfterSelectHooks []NovelHook
var novelAfterUpdateHooks []NovelHook
var novelAfterDeleteHooks []NovelHook
var novelAfterUpsertHooks []NovelHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Novel) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range novelBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Novel) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range novelBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Novel) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range novelBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Novel) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range novelBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Novel) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range novelAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Novel) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range novelAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Novel) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range novelAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Novel) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range novelAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Novel) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range novelAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddNovelHook registers your hook function for all future operations.
func AddNovelHook(hookPoint boil.HookPoint, novelHook NovelHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		novelBeforeInsertHooks = append(novelBeforeInsertHooks, novelHook)
	case boil.BeforeUpdateHook:
		novelBeforeUpdateHooks = append(novelBeforeUpdateHooks, novelHook)
	case boil.BeforeDeleteHook:
		novelBeforeDeleteHooks = append(novelBeforeDeleteHooks, novelHook)
	case boil.BeforeUpsertHook:
		novelBeforeUpsertHooks = append(novelBeforeUpsertHooks, novelHook)
	case boil.AfterInsertHook:
		novelAfterInsertHooks = append(novelAfterInsertHooks, novelHook)
	case boil.AfterSelectHook:
		novelAfterSelectHooks = append(novelAfterSelectHooks, novelHook)
	case boil.AfterUpdateHook:
		novelAfterUpdateHooks = append(novelAfterUpdateHooks, novelHook)
	case boil.AfterDeleteHook:
		novelAfterDeleteHooks = append(novelAfterDeleteHooks, novelHook)
	case boil.AfterUpsertHook:
		novelAfterUpsertHooks = append(novelAfterUpsertHooks, novelHook)
	}
}

// One returns a single novel record from the query.
func (q novelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Novel, error) {
	o := &Novel{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for novel")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Novel records from the query.
func (q novelQuery) All(ctx context.Context, exec boil.ContextExecutor) (NovelSlice, error) {
	var o []*Novel

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Novel slice")
	}

	if len(novelAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Novel records in the query.
func (q novelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count novel rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q novelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if novel exists")
	}

	return count > 0, nil
}

// Cover pointed to by the foreign key.
func (o *Novel) Cover(mods ...qm.QueryMod) coverQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.CoverID),
	}

	queryMods = append(queryMods, mods...)

	query := Covers(queryMods...)
	queries.SetFrom(query.Query, "\"ste\".\"cover\"")

	return query
}

// Language pointed to by the foreign key.
func (o *Novel) Language(mods ...qm.QueryMod) languageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.LanguageID),
	}

	queryMods = append(queryMods, mods...)

	query := Languages(queryMods...)
	queries.SetFrom(query.Query, "\"ste\".\"language\"")

	return query
}

// Ntype pointed to by the foreign key.
func (o *Novel) Ntype(mods ...qm.QueryMod) novelTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.NtypeID),
	}

	queryMods = append(queryMods, mods...)

	query := NovelTypes(queryMods...)
	queries.SetFrom(query.Query, "\"ste\".\"novel_type\"")

	return query
}

// Authors retrieves all the author's Authors with an executor.
func (o *Novel) Authors(mods ...qm.QueryMod) authorQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"ste\".\"author_of_novel\" on \"ste\".\"author\".\"id\" = \"ste\".\"author_of_novel\".\"author_id\""),
		qm.Where("\"ste\".\"author_of_novel\".\"novel_id\"=?", o.ID),
	)

	query := Authors(queryMods...)
	queries.SetFrom(query.Query, "\"ste\".\"author\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"ste\".\"author\".*"})
	}

	return query
}

// Chapters retrieves all the chapter's Chapters with an executor.
func (o *Novel) Chapters(mods ...qm.QueryMod) chapterQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"ste\".\"chapter_of_novel\" on \"ste\".\"chapter\".\"id\" = \"ste\".\"chapter_of_novel\".\"chapter_id\""),
		qm.Where("\"ste\".\"chapter_of_novel\".\"novel_id\"=?", o.ID),
	)

	query := Chapters(queryMods...)
	queries.SetFrom(query.Query, "\"ste\".\"chapter\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"ste\".\"chapter\".*"})
	}

	return query
}

// ChapterQueues retrieves all the chapter_queue's ChapterQueues with an executor.
func (o *Novel) ChapterQueues(mods ...qm.QueryMod) chapterQueueQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"ste\".\"chapter_queue\".\"novel_id\"=?", o.ID),
	)

	query := ChapterQueues(queryMods...)
	queries.SetFrom(query.Query, "\"ste\".\"chapter_queue\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"ste\".\"chapter_queue\".*"})
	}

	return query
}

// Genres retrieves all the genre's Genres with an executor.
func (o *Novel) Genres(mods ...qm.QueryMod) genreQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"ste\".\"genre_of_novel\" on \"ste\".\"genre\".\"id\" = \"ste\".\"genre_of_novel\".\"genre_id\""),
		qm.Where("\"ste\".\"genre_of_novel\".\"novel_id\"=?", o.ID),
	)

	query := Genres(queryMods...)
	queries.SetFrom(query.Query, "\"ste\".\"genre\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"ste\".\"genre\".*"})
	}

	return query
}

// GroupOfNovels retrieves all the group_of_novel's GroupOfNovels with an executor.
func (o *Novel) GroupOfNovels(mods ...qm.QueryMod) groupOfNovelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"ste\".\"group_of_novel\".\"novel_id\"=?", o.ID),
	)

	query := GroupOfNovels(queryMods...)
	queries.SetFrom(query.Query, "\"ste\".\"group_of_novel\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"ste\".\"group_of_novel\".*"})
	}

	return query
}

// NovelQueues retrieves all the novel_queue's NovelQueues with an executor.
func (o *Novel) NovelQueues(mods ...qm.QueryMod) novelQueueQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"ste\".\"novel_queue\".\"novel_id\"=?", o.ID),
	)

	query := NovelQueues(queryMods...)
	queries.SetFrom(query.Query, "\"ste\".\"novel_queue\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"ste\".\"novel_queue\".*"})
	}

	return query
}

// Tags retrieves all the tag's Tags with an executor.
func (o *Novel) Tags(mods ...qm.QueryMod) tagQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"ste\".\"tag_of_novel\" on \"ste\".\"tag\".\"id\" = \"ste\".\"tag_of_novel\".\"tag_id\""),
		qm.Where("\"ste\".\"tag_of_novel\".\"novel_id\"=?", o.ID),
	)

	query := Tags(queryMods...)
	queries.SetFrom(query.Query, "\"ste\".\"tag\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"ste\".\"tag\".*"})
	}

	return query
}

// LoadCover allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (novelL) LoadCover(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNovel interface{}, mods queries.Applicator) error {
	var slice []*Novel
	var object *Novel

	if singular {
		object = maybeNovel.(*Novel)
	} else {
		slice = *maybeNovel.(*[]*Novel)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &novelR{}
		}
		if !queries.IsNil(object.CoverID) {
			args = append(args, object.CoverID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &novelR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CoverID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CoverID) {
				args = append(args, obj.CoverID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`ste.cover`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Cover")
	}

	var resultSlice []*Cover
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Cover")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for cover")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cover")
	}

	if len(novelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Cover = foreign
		if foreign.R == nil {
			foreign.R = &coverR{}
		}
		foreign.R.Novels = append(foreign.R.Novels, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CoverID, foreign.ID) {
				local.R.Cover = foreign
				if foreign.R == nil {
					foreign.R = &coverR{}
				}
				foreign.R.Novels = append(foreign.R.Novels, local)
				break
			}
		}
	}

	return nil
}

// LoadLanguage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (novelL) LoadLanguage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNovel interface{}, mods queries.Applicator) error {
	var slice []*Novel
	var object *Novel

	if singular {
		object = maybeNovel.(*Novel)
	} else {
		slice = *maybeNovel.(*[]*Novel)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &novelR{}
		}
		if !queries.IsNil(object.LanguageID) {
			args = append(args, object.LanguageID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &novelR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.LanguageID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.LanguageID) {
				args = append(args, obj.LanguageID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`ste.language`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Language")
	}

	var resultSlice []*Language
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Language")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for language")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for language")
	}

	if len(novelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Language = foreign
		if foreign.R == nil {
			foreign.R = &languageR{}
		}
		foreign.R.Novels = append(foreign.R.Novels, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.LanguageID, foreign.ID) {
				local.R.Language = foreign
				if foreign.R == nil {
					foreign.R = &languageR{}
				}
				foreign.R.Novels = append(foreign.R.Novels, local)
				break
			}
		}
	}

	return nil
}

// LoadNtype allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (novelL) LoadNtype(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNovel interface{}, mods queries.Applicator) error {
	var slice []*Novel
	var object *Novel

	if singular {
		object = maybeNovel.(*Novel)
	} else {
		slice = *maybeNovel.(*[]*Novel)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &novelR{}
		}
		if !queries.IsNil(object.NtypeID) {
			args = append(args, object.NtypeID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &novelR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.NtypeID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.NtypeID) {
				args = append(args, obj.NtypeID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`ste.novel_type`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load NovelType")
	}

	var resultSlice []*NovelType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice NovelType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for novel_type")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for novel_type")
	}

	if len(novelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Ntype = foreign
		if foreign.R == nil {
			foreign.R = &novelTypeR{}
		}
		foreign.R.NtypeNovels = append(foreign.R.NtypeNovels, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.NtypeID, foreign.ID) {
				local.R.Ntype = foreign
				if foreign.R == nil {
					foreign.R = &novelTypeR{}
				}
				foreign.R.NtypeNovels = append(foreign.R.NtypeNovels, local)
				break
			}
		}
	}

	return nil
}

// LoadAuthors allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (novelL) LoadAuthors(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNovel interface{}, mods queries.Applicator) error {
	var slice []*Novel
	var object *Novel

	if singular {
		object = maybeNovel.(*Novel)
	} else {
		slice = *maybeNovel.(*[]*Novel)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &novelR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &novelR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"ste\".\"author\".*, \"a\".\"novel_id\""),
		qm.From("\"ste\".\"author\""),
		qm.InnerJoin("\"ste\".\"author_of_novel\" as \"a\" on \"ste\".\"author\".\"id\" = \"a\".\"author_id\""),
		qm.WhereIn("\"a\".\"novel_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load author")
	}

	var resultSlice []*Author

	var localJoinCols []int
	for results.Next() {
		one := new(Author)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.Name, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for author")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice author")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on author")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for author")
	}

	if len(authorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Authors = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &authorR{}
			}
			foreign.R.Novels = append(foreign.R.Novels, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Authors = append(local.R.Authors, foreign)
				if foreign.R == nil {
					foreign.R = &authorR{}
				}
				foreign.R.Novels = append(foreign.R.Novels, local)
				break
			}
		}
	}

	return nil
}

// LoadChapters allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (novelL) LoadChapters(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNovel interface{}, mods queries.Applicator) error {
	var slice []*Novel
	var object *Novel

	if singular {
		object = maybeNovel.(*Novel)
	} else {
		slice = *maybeNovel.(*[]*Novel)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &novelR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &novelR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"ste\".\"chapter\".*, \"a\".\"novel_id\""),
		qm.From("\"ste\".\"chapter\""),
		qm.InnerJoin("\"ste\".\"chapter_of_novel\" as \"a\" on \"ste\".\"chapter\".\"id\" = \"a\".\"chapter_id\""),
		qm.WhereIn("\"a\".\"novel_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load chapter")
	}

	var resultSlice []*Chapter

	var localJoinCols []int
	for results.Next() {
		one := new(Chapter)
		var localJoinCol int

		err = results.Scan(&one.Downloaded, &one.GroupID, &one.ID, &one.Idx, &one.Part, &one.Title, &one.URL, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for chapter")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice chapter")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on chapter")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chapter")
	}

	if len(chapterAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Chapters = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &chapterR{}
			}
			foreign.R.Novels = append(foreign.R.Novels, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Chapters = append(local.R.Chapters, foreign)
				if foreign.R == nil {
					foreign.R = &chapterR{}
				}
				foreign.R.Novels = append(foreign.R.Novels, local)
				break
			}
		}
	}

	return nil
}

// LoadChapterQueues allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (novelL) LoadChapterQueues(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNovel interface{}, mods queries.Applicator) error {
	var slice []*Novel
	var object *Novel

	if singular {
		object = maybeNovel.(*Novel)
	} else {
		slice = *maybeNovel.(*[]*Novel)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &novelR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &novelR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`ste.chapter_queue`), qm.WhereIn(`novel_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load chapter_queue")
	}

	var resultSlice []*ChapterQueue
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice chapter_queue")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on chapter_queue")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chapter_queue")
	}

	if len(chapterQueueAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ChapterQueues = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &chapterQueueR{}
			}
			foreign.R.Novel = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.NovelID {
				local.R.ChapterQueues = append(local.R.ChapterQueues, foreign)
				if foreign.R == nil {
					foreign.R = &chapterQueueR{}
				}
				foreign.R.Novel = local
				break
			}
		}
	}

	return nil
}

// LoadGenres allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (novelL) LoadGenres(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNovel interface{}, mods queries.Applicator) error {
	var slice []*Novel
	var object *Novel

	if singular {
		object = maybeNovel.(*Novel)
	} else {
		slice = *maybeNovel.(*[]*Novel)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &novelR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &novelR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"ste\".\"genre\".*, \"a\".\"novel_id\""),
		qm.From("\"ste\".\"genre\""),
		qm.InnerJoin("\"ste\".\"genre_of_novel\" as \"a\" on \"ste\".\"genre\".\"id\" = \"a\".\"genre_id\""),
		qm.WhereIn("\"a\".\"novel_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load genre")
	}

	var resultSlice []*Genre

	var localJoinCols []int
	for results.Next() {
		one := new(Genre)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.Name, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for genre")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice genre")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on genre")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for genre")
	}

	if len(genreAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Genres = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &genreR{}
			}
			foreign.R.Novels = append(foreign.R.Novels, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Genres = append(local.R.Genres, foreign)
				if foreign.R == nil {
					foreign.R = &genreR{}
				}
				foreign.R.Novels = append(foreign.R.Novels, local)
				break
			}
		}
	}

	return nil
}

// LoadGroupOfNovels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (novelL) LoadGroupOfNovels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNovel interface{}, mods queries.Applicator) error {
	var slice []*Novel
	var object *Novel

	if singular {
		object = maybeNovel.(*Novel)
	} else {
		slice = *maybeNovel.(*[]*Novel)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &novelR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &novelR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`ste.group_of_novel`), qm.WhereIn(`novel_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load group_of_novel")
	}

	var resultSlice []*GroupOfNovel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice group_of_novel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on group_of_novel")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for group_of_novel")
	}

	if len(groupOfNovelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GroupOfNovels = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &groupOfNovelR{}
			}
			foreign.R.Novel = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.NovelID {
				local.R.GroupOfNovels = append(local.R.GroupOfNovels, foreign)
				if foreign.R == nil {
					foreign.R = &groupOfNovelR{}
				}
				foreign.R.Novel = local
				break
			}
		}
	}

	return nil
}

// LoadNovelQueues allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (novelL) LoadNovelQueues(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNovel interface{}, mods queries.Applicator) error {
	var slice []*Novel
	var object *Novel

	if singular {
		object = maybeNovel.(*Novel)
	} else {
		slice = *maybeNovel.(*[]*Novel)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &novelR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &novelR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`ste.novel_queue`), qm.WhereIn(`novel_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load novel_queue")
	}

	var resultSlice []*NovelQueue
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice novel_queue")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on novel_queue")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for novel_queue")
	}

	if len(novelQueueAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.NovelQueues = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &novelQueueR{}
			}
			foreign.R.Novel = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.NovelID {
				local.R.NovelQueues = append(local.R.NovelQueues, foreign)
				if foreign.R == nil {
					foreign.R = &novelQueueR{}
				}
				foreign.R.Novel = local
				break
			}
		}
	}

	return nil
}

// LoadTags allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (novelL) LoadTags(ctx context.Context, e boil.ContextExecutor, singular bool, maybeNovel interface{}, mods queries.Applicator) error {
	var slice []*Novel
	var object *Novel

	if singular {
		object = maybeNovel.(*Novel)
	} else {
		slice = *maybeNovel.(*[]*Novel)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &novelR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &novelR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"ste\".\"tag\".*, \"a\".\"novel_id\""),
		qm.From("\"ste\".\"tag\""),
		qm.InnerJoin("\"ste\".\"tag_of_novel\" as \"a\" on \"ste\".\"tag\".\"id\" = \"a\".\"tag_id\""),
		qm.WhereIn("\"a\".\"novel_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tag")
	}

	var resultSlice []*Tag

	var localJoinCols []int
	for results.Next() {
		one := new(Tag)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.Name, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for tag")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice tag")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tag")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tag")
	}

	if len(tagAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Tags = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tagR{}
			}
			foreign.R.Novels = append(foreign.R.Novels, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Tags = append(local.R.Tags, foreign)
				if foreign.R == nil {
					foreign.R = &tagR{}
				}
				foreign.R.Novels = append(foreign.R.Novels, local)
				break
			}
		}
	}

	return nil
}

// SetCover of the novel to the related item.
// Sets o.R.Cover to related.
// Adds o to related.R.Novels.
func (o *Novel) SetCover(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Cover) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"ste\".\"novel\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"cover_id"}),
		strmangle.WhereClause("\"", "\"", 2, novelPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CoverID, related.ID)
	if o.R == nil {
		o.R = &novelR{
			Cover: related,
		}
	} else {
		o.R.Cover = related
	}

	if related.R == nil {
		related.R = &coverR{
			Novels: NovelSlice{o},
		}
	} else {
		related.R.Novels = append(related.R.Novels, o)
	}

	return nil
}

// RemoveCover relationship.
// Sets o.R.Cover to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Novel) RemoveCover(ctx context.Context, exec boil.ContextExecutor, related *Cover) error {
	var err error

	queries.SetScanner(&o.CoverID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("cover_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Cover = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Novels {
		if queries.Equal(o.CoverID, ri.CoverID) {
			continue
		}

		ln := len(related.R.Novels)
		if ln > 1 && i < ln-1 {
			related.R.Novels[i] = related.R.Novels[ln-1]
		}
		related.R.Novels = related.R.Novels[:ln-1]
		break
	}
	return nil
}

// SetLanguage of the novel to the related item.
// Sets o.R.Language to related.
// Adds o to related.R.Novels.
func (o *Novel) SetLanguage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Language) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"ste\".\"novel\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"language_id"}),
		strmangle.WhereClause("\"", "\"", 2, novelPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.LanguageID, related.ID)
	if o.R == nil {
		o.R = &novelR{
			Language: related,
		}
	} else {
		o.R.Language = related
	}

	if related.R == nil {
		related.R = &languageR{
			Novels: NovelSlice{o},
		}
	} else {
		related.R.Novels = append(related.R.Novels, o)
	}

	return nil
}

// RemoveLanguage relationship.
// Sets o.R.Language to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Novel) RemoveLanguage(ctx context.Context, exec boil.ContextExecutor, related *Language) error {
	var err error

	queries.SetScanner(&o.LanguageID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("language_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Language = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Novels {
		if queries.Equal(o.LanguageID, ri.LanguageID) {
			continue
		}

		ln := len(related.R.Novels)
		if ln > 1 && i < ln-1 {
			related.R.Novels[i] = related.R.Novels[ln-1]
		}
		related.R.Novels = related.R.Novels[:ln-1]
		break
	}
	return nil
}

// SetNtype of the novel to the related item.
// Sets o.R.Ntype to related.
// Adds o to related.R.NtypeNovels.
func (o *Novel) SetNtype(ctx context.Context, exec boil.ContextExecutor, insert bool, related *NovelType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"ste\".\"novel\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"ntype_id"}),
		strmangle.WhereClause("\"", "\"", 2, novelPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.NtypeID, related.ID)
	if o.R == nil {
		o.R = &novelR{
			Ntype: related,
		}
	} else {
		o.R.Ntype = related
	}

	if related.R == nil {
		related.R = &novelTypeR{
			NtypeNovels: NovelSlice{o},
		}
	} else {
		related.R.NtypeNovels = append(related.R.NtypeNovels, o)
	}

	return nil
}

// RemoveNtype relationship.
// Sets o.R.Ntype to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Novel) RemoveNtype(ctx context.Context, exec boil.ContextExecutor, related *NovelType) error {
	var err error

	queries.SetScanner(&o.NtypeID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("ntype_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Ntype = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.NtypeNovels {
		if queries.Equal(o.NtypeID, ri.NtypeID) {
			continue
		}

		ln := len(related.R.NtypeNovels)
		if ln > 1 && i < ln-1 {
			related.R.NtypeNovels[i] = related.R.NtypeNovels[ln-1]
		}
		related.R.NtypeNovels = related.R.NtypeNovels[:ln-1]
		break
	}
	return nil
}

// AddAuthors adds the given related objects to the existing relationships
// of the novel, optionally inserting them as new records.
// Appends related to o.R.Authors.
// Sets related.R.Novels appropriately.
func (o *Novel) AddAuthors(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Author) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"ste\".\"author_of_novel\" (\"novel_id\", \"author_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &novelR{
			Authors: related,
		}
	} else {
		o.R.Authors = append(o.R.Authors, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &authorR{
				Novels: NovelSlice{o},
			}
		} else {
			rel.R.Novels = append(rel.R.Novels, o)
		}
	}
	return nil
}

// SetAuthors removes all previously related items of the
// novel replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Novels's Authors accordingly.
// Replaces o.R.Authors with related.
// Sets related.R.Novels's Authors accordingly.
func (o *Novel) SetAuthors(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Author) error {
	query := "delete from \"ste\".\"author_of_novel\" where \"novel_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeAuthorsFromNovelsSlice(o, related)
	if o.R != nil {
		o.R.Authors = nil
	}
	return o.AddAuthors(ctx, exec, insert, related...)
}

// RemoveAuthors relationships from objects passed in.
// Removes related items from R.Authors (uses pointer comparison, removal does not keep order)
// Sets related.R.Novels.
func (o *Novel) RemoveAuthors(ctx context.Context, exec boil.ContextExecutor, related ...*Author) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"ste\".\"author_of_novel\" where \"novel_id\" = $1 and \"author_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeAuthorsFromNovelsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Authors {
			if rel != ri {
				continue
			}

			ln := len(o.R.Authors)
			if ln > 1 && i < ln-1 {
				o.R.Authors[i] = o.R.Authors[ln-1]
			}
			o.R.Authors = o.R.Authors[:ln-1]
			break
		}
	}

	return nil
}

func removeAuthorsFromNovelsSlice(o *Novel, related []*Author) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Novels {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Novels)
			if ln > 1 && i < ln-1 {
				rel.R.Novels[i] = rel.R.Novels[ln-1]
			}
			rel.R.Novels = rel.R.Novels[:ln-1]
			break
		}
	}
}

// AddChapters adds the given related objects to the existing relationships
// of the novel, optionally inserting them as new records.
// Appends related to o.R.Chapters.
// Sets related.R.Novels appropriately.
func (o *Novel) AddChapters(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Chapter) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"ste\".\"chapter_of_novel\" (\"novel_id\", \"chapter_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &novelR{
			Chapters: related,
		}
	} else {
		o.R.Chapters = append(o.R.Chapters, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &chapterR{
				Novels: NovelSlice{o},
			}
		} else {
			rel.R.Novels = append(rel.R.Novels, o)
		}
	}
	return nil
}

// SetChapters removes all previously related items of the
// novel replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Novels's Chapters accordingly.
// Replaces o.R.Chapters with related.
// Sets related.R.Novels's Chapters accordingly.
func (o *Novel) SetChapters(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Chapter) error {
	query := "delete from \"ste\".\"chapter_of_novel\" where \"novel_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeChaptersFromNovelsSlice(o, related)
	if o.R != nil {
		o.R.Chapters = nil
	}
	return o.AddChapters(ctx, exec, insert, related...)
}

// RemoveChapters relationships from objects passed in.
// Removes related items from R.Chapters (uses pointer comparison, removal does not keep order)
// Sets related.R.Novels.
func (o *Novel) RemoveChapters(ctx context.Context, exec boil.ContextExecutor, related ...*Chapter) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"ste\".\"chapter_of_novel\" where \"novel_id\" = $1 and \"chapter_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeChaptersFromNovelsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Chapters {
			if rel != ri {
				continue
			}

			ln := len(o.R.Chapters)
			if ln > 1 && i < ln-1 {
				o.R.Chapters[i] = o.R.Chapters[ln-1]
			}
			o.R.Chapters = o.R.Chapters[:ln-1]
			break
		}
	}

	return nil
}

func removeChaptersFromNovelsSlice(o *Novel, related []*Chapter) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Novels {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Novels)
			if ln > 1 && i < ln-1 {
				rel.R.Novels[i] = rel.R.Novels[ln-1]
			}
			rel.R.Novels = rel.R.Novels[:ln-1]
			break
		}
	}
}

// AddChapterQueues adds the given related objects to the existing relationships
// of the novel, optionally inserting them as new records.
// Appends related to o.R.ChapterQueues.
// Sets related.R.Novel appropriately.
func (o *Novel) AddChapterQueues(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ChapterQueue) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.NovelID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"ste\".\"chapter_queue\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"novel_id"}),
				strmangle.WhereClause("\"", "\"", 2, chapterQueuePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.NovelID, rel.ChapterID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.NovelID = o.ID
		}
	}

	if o.R == nil {
		o.R = &novelR{
			ChapterQueues: related,
		}
	} else {
		o.R.ChapterQueues = append(o.R.ChapterQueues, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &chapterQueueR{
				Novel: o,
			}
		} else {
			rel.R.Novel = o
		}
	}
	return nil
}

// AddGenres adds the given related objects to the existing relationships
// of the novel, optionally inserting them as new records.
// Appends related to o.R.Genres.
// Sets related.R.Novels appropriately.
func (o *Novel) AddGenres(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Genre) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"ste\".\"genre_of_novel\" (\"novel_id\", \"genre_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &novelR{
			Genres: related,
		}
	} else {
		o.R.Genres = append(o.R.Genres, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &genreR{
				Novels: NovelSlice{o},
			}
		} else {
			rel.R.Novels = append(rel.R.Novels, o)
		}
	}
	return nil
}

// SetGenres removes all previously related items of the
// novel replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Novels's Genres accordingly.
// Replaces o.R.Genres with related.
// Sets related.R.Novels's Genres accordingly.
func (o *Novel) SetGenres(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Genre) error {
	query := "delete from \"ste\".\"genre_of_novel\" where \"novel_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeGenresFromNovelsSlice(o, related)
	if o.R != nil {
		o.R.Genres = nil
	}
	return o.AddGenres(ctx, exec, insert, related...)
}

// RemoveGenres relationships from objects passed in.
// Removes related items from R.Genres (uses pointer comparison, removal does not keep order)
// Sets related.R.Novels.
func (o *Novel) RemoveGenres(ctx context.Context, exec boil.ContextExecutor, related ...*Genre) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"ste\".\"genre_of_novel\" where \"novel_id\" = $1 and \"genre_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeGenresFromNovelsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Genres {
			if rel != ri {
				continue
			}

			ln := len(o.R.Genres)
			if ln > 1 && i < ln-1 {
				o.R.Genres[i] = o.R.Genres[ln-1]
			}
			o.R.Genres = o.R.Genres[:ln-1]
			break
		}
	}

	return nil
}

func removeGenresFromNovelsSlice(o *Novel, related []*Genre) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Novels {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Novels)
			if ln > 1 && i < ln-1 {
				rel.R.Novels[i] = rel.R.Novels[ln-1]
			}
			rel.R.Novels = rel.R.Novels[:ln-1]
			break
		}
	}
}

// AddGroupOfNovels adds the given related objects to the existing relationships
// of the novel, optionally inserting them as new records.
// Appends related to o.R.GroupOfNovels.
// Sets related.R.Novel appropriately.
func (o *Novel) AddGroupOfNovels(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*GroupOfNovel) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.NovelID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"ste\".\"group_of_novel\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"novel_id"}),
				strmangle.WhereClause("\"", "\"", 2, groupOfNovelPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.NovelID, rel.GroupID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.NovelID = o.ID
		}
	}

	if o.R == nil {
		o.R = &novelR{
			GroupOfNovels: related,
		}
	} else {
		o.R.GroupOfNovels = append(o.R.GroupOfNovels, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &groupOfNovelR{
				Novel: o,
			}
		} else {
			rel.R.Novel = o
		}
	}
	return nil
}

// AddNovelQueues adds the given related objects to the existing relationships
// of the novel, optionally inserting them as new records.
// Appends related to o.R.NovelQueues.
// Sets related.R.Novel appropriately.
func (o *Novel) AddNovelQueues(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*NovelQueue) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.NovelID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"ste\".\"novel_queue\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"novel_id"}),
				strmangle.WhereClause("\"", "\"", 2, novelQueuePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.NovelID, rel.QueuedAt}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.NovelID = o.ID
		}
	}

	if o.R == nil {
		o.R = &novelR{
			NovelQueues: related,
		}
	} else {
		o.R.NovelQueues = append(o.R.NovelQueues, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &novelQueueR{
				Novel: o,
			}
		} else {
			rel.R.Novel = o
		}
	}
	return nil
}

// AddTags adds the given related objects to the existing relationships
// of the novel, optionally inserting them as new records.
// Appends related to o.R.Tags.
// Sets related.R.Novels appropriately.
func (o *Novel) AddTags(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Tag) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"ste\".\"tag_of_novel\" (\"novel_id\", \"tag_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &novelR{
			Tags: related,
		}
	} else {
		o.R.Tags = append(o.R.Tags, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tagR{
				Novels: NovelSlice{o},
			}
		} else {
			rel.R.Novels = append(rel.R.Novels, o)
		}
	}
	return nil
}

// SetTags removes all previously related items of the
// novel replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Novels's Tags accordingly.
// Replaces o.R.Tags with related.
// Sets related.R.Novels's Tags accordingly.
func (o *Novel) SetTags(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Tag) error {
	query := "delete from \"ste\".\"tag_of_novel\" where \"novel_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeTagsFromNovelsSlice(o, related)
	if o.R != nil {
		o.R.Tags = nil
	}
	return o.AddTags(ctx, exec, insert, related...)
}

// RemoveTags relationships from objects passed in.
// Removes related items from R.Tags (uses pointer comparison, removal does not keep order)
// Sets related.R.Novels.
func (o *Novel) RemoveTags(ctx context.Context, exec boil.ContextExecutor, related ...*Tag) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"ste\".\"tag_of_novel\" where \"novel_id\" = $1 and \"tag_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeTagsFromNovelsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Tags {
			if rel != ri {
				continue
			}

			ln := len(o.R.Tags)
			if ln > 1 && i < ln-1 {
				o.R.Tags[i] = o.R.Tags[ln-1]
			}
			o.R.Tags = o.R.Tags[:ln-1]
			break
		}
	}

	return nil
}

func removeTagsFromNovelsSlice(o *Novel, related []*Tag) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Novels {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Novels)
			if ln > 1 && i < ln-1 {
				rel.R.Novels[i] = rel.R.Novels[ln-1]
			}
			rel.R.Novels = rel.R.Novels[:ln-1]
			break
		}
	}
}

// Novels retrieves all the records using an executor.
func Novels(mods ...qm.QueryMod) novelQuery {
	mods = append(mods, qm.From("\"ste\".\"novel\""))
	return novelQuery{NewQuery(mods...)}
}

// FindNovel retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNovel(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Novel, error) {
	novelObj := &Novel{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"ste\".\"novel\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, novelObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from novel")
	}

	return novelObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Novel) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no novel provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(novelColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	novelInsertCacheMut.RLock()
	cache, cached := novelInsertCache[key]
	novelInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			novelColumns,
			novelColumnsWithDefault,
			novelColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(novelType, novelMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(novelType, novelMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"ste\".\"novel\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"ste\".\"novel\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into novel")
	}

	if !cached {
		novelInsertCacheMut.Lock()
		novelInsertCache[key] = cache
		novelInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Novel.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Novel) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	novelUpdateCacheMut.RLock()
	cache, cached := novelUpdateCache[key]
	novelUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			novelColumns,
			novelPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update novel, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"ste\".\"novel\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, novelPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(novelType, novelMapping, append(wl, novelPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update novel row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for novel")
	}

	if !cached {
		novelUpdateCacheMut.Lock()
		novelUpdateCache[key] = cache
		novelUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q novelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for novel")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for novel")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NovelSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), novelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"ste\".\"novel\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, novelPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in novel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all novel")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Novel) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no novel provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(novelColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	novelUpsertCacheMut.RLock()
	cache, cached := novelUpsertCache[key]
	novelUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			novelColumns,
			novelColumnsWithDefault,
			novelColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			novelColumns,
			novelPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert novel, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(novelPrimaryKeyColumns))
			copy(conflict, novelPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"ste\".\"novel\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(novelType, novelMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(novelType, novelMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert novel")
	}

	if !cached {
		novelUpsertCacheMut.Lock()
		novelUpsertCache[key] = cache
		novelUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Novel record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Novel) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Novel provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), novelPrimaryKeyMapping)
	sql := "DELETE FROM \"ste\".\"novel\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from novel")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for novel")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q novelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no novelQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from novel")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for novel")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NovelSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(novelBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), novelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"ste\".\"novel\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, novelPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from novel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for novel")
	}

	if len(novelAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Novel) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindNovel(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NovelSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := NovelSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), novelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"ste\".\"novel\".* FROM \"ste\".\"novel\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, novelPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in NovelSlice")
	}

	*o = slice

	return nil
}

// NovelExists checks if the Novel row exists.
func NovelExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"ste\".\"novel\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if novel exists")
	}

	return exists, nil
}
