// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ChapterQueue is an object representing the database table.
type ChapterQueue struct {
	NovelID    int       `boil:"novel_id" json:"novel_id" toml:"novel_id" yaml:"novel_id"`
	ChapterID  int       `boil:"chapter_id" json:"chapter_id" toml:"chapter_id" yaml:"chapter_id"`
	QueuedAt   time.Time `boil:"queued_at" json:"queued_at" toml:"queued_at" yaml:"queued_at"`
	Finished   null.Bool `boil:"finished" json:"finished,omitempty" toml:"finished" yaml:"finished,omitempty"`
	FinishedAt null.Time `boil:"finished_at" json:"finished_at,omitempty" toml:"finished_at" yaml:"finished_at,omitempty"`

	R *chapterQueueR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L chapterQueueL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChapterQueueColumns = struct {
	NovelID    string
	ChapterID  string
	QueuedAt   string
	Finished   string
	FinishedAt string
}{
	NovelID:    "novel_id",
	ChapterID:  "chapter_id",
	QueuedAt:   "queued_at",
	Finished:   "finished",
	FinishedAt: "finished_at",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ChapterQueueWhere = struct {
	NovelID    whereHelperint
	ChapterID  whereHelperint
	QueuedAt   whereHelpertime_Time
	Finished   whereHelpernull_Bool
	FinishedAt whereHelpernull_Time
}{
	NovelID:    whereHelperint{field: `novel_id`},
	ChapterID:  whereHelperint{field: `chapter_id`},
	QueuedAt:   whereHelpertime_Time{field: `queued_at`},
	Finished:   whereHelpernull_Bool{field: `finished`},
	FinishedAt: whereHelpernull_Time{field: `finished_at`},
}

// ChapterQueueRels is where relationship names are stored.
var ChapterQueueRels = struct {
	Chapter string
	Novel   string
}{
	Chapter: "Chapter",
	Novel:   "Novel",
}

// chapterQueueR is where relationships are stored.
type chapterQueueR struct {
	Chapter *Chapter
	Novel   *Novel
}

// NewStruct creates a new relationship struct
func (*chapterQueueR) NewStruct() *chapterQueueR {
	return &chapterQueueR{}
}

// chapterQueueL is where Load methods for each relationship are stored.
type chapterQueueL struct{}

var (
	chapterQueueColumns               = []string{"novel_id", "chapter_id", "queued_at", "finished", "finished_at"}
	chapterQueueColumnsWithoutDefault = []string{"novel_id", "chapter_id", "queued_at", "finished_at"}
	chapterQueueColumnsWithDefault    = []string{"finished"}
	chapterQueuePrimaryKeyColumns     = []string{"novel_id", "chapter_id"}
)

type (
	// ChapterQueueSlice is an alias for a slice of pointers to ChapterQueue.
	// This should generally be used opposed to []ChapterQueue.
	ChapterQueueSlice []*ChapterQueue
	// ChapterQueueHook is the signature for custom ChapterQueue hook methods
	ChapterQueueHook func(context.Context, boil.ContextExecutor, *ChapterQueue) error

	chapterQueueQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	chapterQueueType                 = reflect.TypeOf(&ChapterQueue{})
	chapterQueueMapping              = queries.MakeStructMapping(chapterQueueType)
	chapterQueuePrimaryKeyMapping, _ = queries.BindMapping(chapterQueueType, chapterQueueMapping, chapterQueuePrimaryKeyColumns)
	chapterQueueInsertCacheMut       sync.RWMutex
	chapterQueueInsertCache          = make(map[string]insertCache)
	chapterQueueUpdateCacheMut       sync.RWMutex
	chapterQueueUpdateCache          = make(map[string]updateCache)
	chapterQueueUpsertCacheMut       sync.RWMutex
	chapterQueueUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var chapterQueueBeforeInsertHooks []ChapterQueueHook
var chapterQueueBeforeUpdateHooks []ChapterQueueHook
var chapterQueueBeforeDeleteHooks []ChapterQueueHook
var chapterQueueBeforeUpsertHooks []ChapterQueueHook

var chapterQueueAfterInsertHooks []ChapterQueueHook
var chapterQueueAfterSelectHooks []ChapterQueueHook
var chapterQueueAfterUpdateHooks []ChapterQueueHook
var chapterQueueAfterDeleteHooks []ChapterQueueHook
var chapterQueueAfterUpsertHooks []ChapterQueueHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ChapterQueue) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chapterQueueBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ChapterQueue) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chapterQueueBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ChapterQueue) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chapterQueueBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ChapterQueue) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chapterQueueBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ChapterQueue) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chapterQueueAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ChapterQueue) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chapterQueueAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ChapterQueue) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chapterQueueAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ChapterQueue) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chapterQueueAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ChapterQueue) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range chapterQueueAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddChapterQueueHook registers your hook function for all future operations.
func AddChapterQueueHook(hookPoint boil.HookPoint, chapterQueueHook ChapterQueueHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		chapterQueueBeforeInsertHooks = append(chapterQueueBeforeInsertHooks, chapterQueueHook)
	case boil.BeforeUpdateHook:
		chapterQueueBeforeUpdateHooks = append(chapterQueueBeforeUpdateHooks, chapterQueueHook)
	case boil.BeforeDeleteHook:
		chapterQueueBeforeDeleteHooks = append(chapterQueueBeforeDeleteHooks, chapterQueueHook)
	case boil.BeforeUpsertHook:
		chapterQueueBeforeUpsertHooks = append(chapterQueueBeforeUpsertHooks, chapterQueueHook)
	case boil.AfterInsertHook:
		chapterQueueAfterInsertHooks = append(chapterQueueAfterInsertHooks, chapterQueueHook)
	case boil.AfterSelectHook:
		chapterQueueAfterSelectHooks = append(chapterQueueAfterSelectHooks, chapterQueueHook)
	case boil.AfterUpdateHook:
		chapterQueueAfterUpdateHooks = append(chapterQueueAfterUpdateHooks, chapterQueueHook)
	case boil.AfterDeleteHook:
		chapterQueueAfterDeleteHooks = append(chapterQueueAfterDeleteHooks, chapterQueueHook)
	case boil.AfterUpsertHook:
		chapterQueueAfterUpsertHooks = append(chapterQueueAfterUpsertHooks, chapterQueueHook)
	}
}

// One returns a single chapterQueue record from the query.
func (q chapterQueueQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ChapterQueue, error) {
	o := &ChapterQueue{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for chapter_queue")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ChapterQueue records from the query.
func (q chapterQueueQuery) All(ctx context.Context, exec boil.ContextExecutor) (ChapterQueueSlice, error) {
	var o []*ChapterQueue

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ChapterQueue slice")
	}

	if len(chapterQueueAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ChapterQueue records in the query.
func (q chapterQueueQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count chapter_queue rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q chapterQueueQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if chapter_queue exists")
	}

	return count > 0, nil
}

// Chapter pointed to by the foreign key.
func (o *ChapterQueue) Chapter(mods ...qm.QueryMod) chapterQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ChapterID),
	}

	queryMods = append(queryMods, mods...)

	query := Chapters(queryMods...)
	queries.SetFrom(query.Query, "\"ste\".\"chapter\"")

	return query
}

// Novel pointed to by the foreign key.
func (o *ChapterQueue) Novel(mods ...qm.QueryMod) novelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.NovelID),
	}

	queryMods = append(queryMods, mods...)

	query := Novels(queryMods...)
	queries.SetFrom(query.Query, "\"ste\".\"novel\"")

	return query
}

// LoadChapter allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (chapterQueueL) LoadChapter(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChapterQueue interface{}, mods queries.Applicator) error {
	var slice []*ChapterQueue
	var object *ChapterQueue

	if singular {
		object = maybeChapterQueue.(*ChapterQueue)
	} else {
		slice = *maybeChapterQueue.(*[]*ChapterQueue)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chapterQueueR{}
		}
		args = append(args, object.ChapterID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chapterQueueR{}
			}

			for _, a := range args {
				if a == obj.ChapterID {
					continue Outer
				}
			}

			args = append(args, obj.ChapterID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`ste.chapter`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Chapter")
	}

	var resultSlice []*Chapter
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Chapter")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for chapter")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for chapter")
	}

	if len(chapterQueueAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Chapter = foreign
		if foreign.R == nil {
			foreign.R = &chapterR{}
		}
		foreign.R.ChapterQueues = append(foreign.R.ChapterQueues, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChapterID == foreign.ID {
				local.R.Chapter = foreign
				if foreign.R == nil {
					foreign.R = &chapterR{}
				}
				foreign.R.ChapterQueues = append(foreign.R.ChapterQueues, local)
				break
			}
		}
	}

	return nil
}

// LoadNovel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (chapterQueueL) LoadNovel(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChapterQueue interface{}, mods queries.Applicator) error {
	var slice []*ChapterQueue
	var object *ChapterQueue

	if singular {
		object = maybeChapterQueue.(*ChapterQueue)
	} else {
		slice = *maybeChapterQueue.(*[]*ChapterQueue)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &chapterQueueR{}
		}
		args = append(args, object.NovelID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &chapterQueueR{}
			}

			for _, a := range args {
				if a == obj.NovelID {
					continue Outer
				}
			}

			args = append(args, obj.NovelID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`ste.novel`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Novel")
	}

	var resultSlice []*Novel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Novel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for novel")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for novel")
	}

	if len(chapterQueueAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Novel = foreign
		if foreign.R == nil {
			foreign.R = &novelR{}
		}
		foreign.R.ChapterQueues = append(foreign.R.ChapterQueues, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.NovelID == foreign.ID {
				local.R.Novel = foreign
				if foreign.R == nil {
					foreign.R = &novelR{}
				}
				foreign.R.ChapterQueues = append(foreign.R.ChapterQueues, local)
				break
			}
		}
	}

	return nil
}

// SetChapter of the chapterQueue to the related item.
// Sets o.R.Chapter to related.
// Adds o to related.R.ChapterQueues.
func (o *ChapterQueue) SetChapter(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Chapter) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"ste\".\"chapter_queue\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"chapter_id"}),
		strmangle.WhereClause("\"", "\"", 2, chapterQueuePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.NovelID, o.ChapterID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChapterID = related.ID
	if o.R == nil {
		o.R = &chapterQueueR{
			Chapter: related,
		}
	} else {
		o.R.Chapter = related
	}

	if related.R == nil {
		related.R = &chapterR{
			ChapterQueues: ChapterQueueSlice{o},
		}
	} else {
		related.R.ChapterQueues = append(related.R.ChapterQueues, o)
	}

	return nil
}

// SetNovel of the chapterQueue to the related item.
// Sets o.R.Novel to related.
// Adds o to related.R.ChapterQueues.
func (o *ChapterQueue) SetNovel(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Novel) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"ste\".\"chapter_queue\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"novel_id"}),
		strmangle.WhereClause("\"", "\"", 2, chapterQueuePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.NovelID, o.ChapterID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.NovelID = related.ID
	if o.R == nil {
		o.R = &chapterQueueR{
			Novel: related,
		}
	} else {
		o.R.Novel = related
	}

	if related.R == nil {
		related.R = &novelR{
			ChapterQueues: ChapterQueueSlice{o},
		}
	} else {
		related.R.ChapterQueues = append(related.R.ChapterQueues, o)
	}

	return nil
}

// ChapterQueues retrieves all the records using an executor.
func ChapterQueues(mods ...qm.QueryMod) chapterQueueQuery {
	mods = append(mods, qm.From("\"ste\".\"chapter_queue\""))
	return chapterQueueQuery{NewQuery(mods...)}
}

// FindChapterQueue retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindChapterQueue(ctx context.Context, exec boil.ContextExecutor, novelID int, chapterID int, selectCols ...string) (*ChapterQueue, error) {
	chapterQueueObj := &ChapterQueue{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"ste\".\"chapter_queue\" where \"novel_id\"=$1 AND \"chapter_id\"=$2", sel,
	)

	q := queries.Raw(query, novelID, chapterID)

	err := q.Bind(ctx, exec, chapterQueueObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from chapter_queue")
	}

	return chapterQueueObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ChapterQueue) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no chapter_queue provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chapterQueueColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	chapterQueueInsertCacheMut.RLock()
	cache, cached := chapterQueueInsertCache[key]
	chapterQueueInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			chapterQueueColumns,
			chapterQueueColumnsWithDefault,
			chapterQueueColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(chapterQueueType, chapterQueueMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(chapterQueueType, chapterQueueMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"ste\".\"chapter_queue\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"ste\".\"chapter_queue\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into chapter_queue")
	}

	if !cached {
		chapterQueueInsertCacheMut.Lock()
		chapterQueueInsertCache[key] = cache
		chapterQueueInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ChapterQueue.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ChapterQueue) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	chapterQueueUpdateCacheMut.RLock()
	cache, cached := chapterQueueUpdateCache[key]
	chapterQueueUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			chapterQueueColumns,
			chapterQueuePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update chapter_queue, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"ste\".\"chapter_queue\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, chapterQueuePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(chapterQueueType, chapterQueueMapping, append(wl, chapterQueuePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update chapter_queue row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for chapter_queue")
	}

	if !cached {
		chapterQueueUpdateCacheMut.Lock()
		chapterQueueUpdateCache[key] = cache
		chapterQueueUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q chapterQueueQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for chapter_queue")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for chapter_queue")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChapterQueueSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chapterQueuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"ste\".\"chapter_queue\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, chapterQueuePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in chapterQueue slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all chapterQueue")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ChapterQueue) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no chapter_queue provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(chapterQueueColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	chapterQueueUpsertCacheMut.RLock()
	cache, cached := chapterQueueUpsertCache[key]
	chapterQueueUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			chapterQueueColumns,
			chapterQueueColumnsWithDefault,
			chapterQueueColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			chapterQueueColumns,
			chapterQueuePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert chapter_queue, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(chapterQueuePrimaryKeyColumns))
			copy(conflict, chapterQueuePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"ste\".\"chapter_queue\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(chapterQueueType, chapterQueueMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(chapterQueueType, chapterQueueMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert chapter_queue")
	}

	if !cached {
		chapterQueueUpsertCacheMut.Lock()
		chapterQueueUpsertCache[key] = cache
		chapterQueueUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ChapterQueue record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ChapterQueue) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ChapterQueue provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), chapterQueuePrimaryKeyMapping)
	sql := "DELETE FROM \"ste\".\"chapter_queue\" WHERE \"novel_id\"=$1 AND \"chapter_id\"=$2"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from chapter_queue")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for chapter_queue")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q chapterQueueQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no chapterQueueQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from chapter_queue")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for chapter_queue")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChapterQueueSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ChapterQueue slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(chapterQueueBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chapterQueuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"ste\".\"chapter_queue\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, chapterQueuePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from chapterQueue slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for chapter_queue")
	}

	if len(chapterQueueAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ChapterQueue) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindChapterQueue(ctx, exec, o.NovelID, o.ChapterID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChapterQueueSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ChapterQueueSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), chapterQueuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"ste\".\"chapter_queue\".* FROM \"ste\".\"chapter_queue\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, chapterQueuePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ChapterQueueSlice")
	}

	*o = slice

	return nil
}

// ChapterQueueExists checks if the ChapterQueue row exists.
func ChapterQueueExists(ctx context.Context, exec boil.ContextExecutor, novelID int, chapterID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"ste\".\"chapter_queue\" where \"novel_id\"=$1 AND \"chapter_id\"=$2 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, novelID, chapterID)
	}

	row := exec.QueryRowContext(ctx, sql, novelID, chapterID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if chapter_queue exists")
	}

	return exists, nil
}
